{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cycling Beats - Documentation","text":"<p>Documentation for CyclingBeats (www.cyclingbeats.com).  Ride, Record, Reward: Unleash Your Adventure on Two Wheels!</p>"},{"location":"#documentation-access","title":"Documentation Access","text":"<ul> <li> <p>Live URL https://timpandrews.github.io/beats_docs/</p> </li> <li> <p>Run Locally <pre><code>mkdocs serve --dev-addr=127.0.0.1:8001\n</code></pre> Local URL: http://127.0.0.1:8001/</p> </li> <li> <p>Installation Locally Steps to install locally</p> </li> </ul>"},{"location":"#install-guides","title":"Install Guides","text":""},{"location":"#tasks","title":"Tasks","text":""},{"location":"#tools-resources-procedures","title":"Tools, Resources, Procedures","text":""},{"location":"#dependencies","title":"Dependencies","text":""},{"location":"#beat-tools","title":"Beat-Tools","text":""},{"location":"#beats-docs","title":"Beats-Docs","text":""},{"location":"#misc","title":"Misc","text":""},{"location":"#extras","title":"Extras","text":""},{"location":"#v2","title":"v2","text":""},{"location":"beats_docs/","title":"Beats Documentation (this site)","text":""},{"location":"beats_docs/#documentation-access","title":"Documentation Access","text":"<ul> <li>Local URL: http://127.0.0.1:8001/</li> <li>Live URL https://timpandrews.github.io/beats_docs/</li> <li> GitHub Repository</li> </ul>"},{"location":"beats_docs/#instructions","title":"Instructions","text":"<ul> <li>Run Locally <pre><code>mkdocs serve --dev-addr=127.0.0.1:8001\n</code></pre></li> <li>Steps to install locally </li> <li>Publish to Web  <ul> <li>Push code to github repo.  </li> <li>Github actions will automatically publish to Github Pages Site</li> </ul> </li> </ul>"},{"location":"beats_docs/#tools-mkdocs","title":"Tools - MkDocs","text":"<ul> <li> <p>MkDocs   MkDocs</p> </li> <li> <p>Material for MkDocs   Material for MkDocs |   Documentation With MkDocs</p> </li> </ul>"},{"location":"beats_tools/","title":"BEATS_TOOLS","text":"<p>This Python CLI Application is used to build and execute custom admin tools for the Beats Django Web Project.  </p> <p>Currently tools include a convert_strava_csv_to_beats_yaml tool.  Data from the activities.csv file provided by Strava can be converted into a YAML file that can be imported into the Beats Project Database use Django Admin and an Import function provided by the  django-import-export library. </p> <p> GitHub Repository</p> <p>Tools Available:   - convert_strava</p>"},{"location":"beats_tools/#usage","title":"Usage","text":""},{"location":"beats_tools/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository:</p> <pre><code>git clone [repository_url]\n</code></pre> </li> <li> <p>Navigate to the Project directory</p> <pre><code>cd beats_tools\n</code></pre> </li> <li> <p>Create and activate a virtual environment</p> <pre><code>python3 -m venv _env\nsource _env/bin/activate\n</code></pre> </li> <li> <p>Install dependencies     <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> </ol>"},{"location":"beats_tools/#running-the-application","title":"Running the Application","text":"<ol> <li>Open a terminal.</li> <li>Navigate to the directory containing the <code>tool.py</code> file.     <pre><code>cd apps/beats_tools\n</code></pre></li> <li>Execute command at command line (e.g.)     <pre><code>python tools.py --help\n</code></pre></li> </ol>"},{"location":"beats_tools/#command-line","title":"Command Line","text":"<ul> <li> <p>help (will list commands available):</p> <pre><code>python tools.py --help\n</code></pre> </li> </ul>"},{"location":"beats_tools/#tools","title":"Tools","text":""},{"location":"beats_tools/#convert-strava-tool","title":"Convert Strava Tool","text":"<p>Takes Activities.CSV that Strava will provide when you request your data history, and a userID that can be found in the Beats DjangoAdminSite-UserModel and creats a .YAML file ready for import into Beats.  Import can be done using the Beats DjangeAdminSite-ActivityModel using the import tools that is provided by the django-import-export library.</p> <p><pre><code>python tools.py convert_strava --help\npython tools.py convert_strava [-h] [--user_id USER_ID] [input] [output]\n</code></pre> i.e. <pre><code>python tools.py convert_strava --user_id 123 activities.csv output.yaml\n</code></pre></p>"},{"location":"conventions/","title":"Conventions","text":""},{"location":"conventions/#branch-naming-conventions","title":"Branch Naming Conventions","text":""},{"location":"conventions/#change-log-conventions","title":"Change Log Conventions","text":""},{"location":"conventions/#commit-messages-conventions","title":"Commit Messages Conventions","text":""},{"location":"conventions/#commit-message-examples","title":"Commit Message Examples","text":""},{"location":"dependencies/","title":"Project Dependencies","text":""},{"location":"dependencies/#listing-from-pyprojecttoml","title":"Listing from pyproject.toml","text":"pyproject.toml (partial, 2/2/2024)<pre><code>[tool.poetry.dependencies]\npython = \"^3.12\"\ndjango = \"^5.0\"\ndjango-admin-env-notice = \"^1.0\"\ndjango-allauth = \"^0.59.0\"\ndjango-auto-logout = \"^0.5.1\"\ndjango-bootstrap-datepicker-plus = \"^5.0.5\"\ndjango-bootstrap-input-group = \"^1.0.1\"\ndjango-bootstrap5 = \"^23.3\"\ndjango-environ = \"^0.11.2\"\ndjango-htmx = \"^1.17.2\"\ndjango-import-export = \"^3.3.6\"\ndjango-split-settings = \"^1.2.0\"\ndjango-timezone-field = \"^6.1.0\" # TODO: not using timezone field anymore. Remove?\ndjango-waffle = \"^4.1.0\"\nfitdecode = \"^0.10.0\"\npendulum = \"^3.0.0\"\npillow = \"^10.1.0\"\npsycopg2-binary = \"^2.9.9\"\npytz = \"^2023.3.post1\"\npyyaml = \"^6.0.1\"\ngeopy = \"^2.4.1\"  #TODO: Need to document\nfolium = \"^0.15.1\"  #TODO: Need to document\n\n\n[tool.poetry.group.dev.dependencies]\nblack = \"^23.12.0\"\ncolorlog = \"^6.8.0\"\ncoverage = \"^7.3.3\"\nflake8 = \"^6.1.0\"\nisort = \"^5.13.1\"\npre-commit = \"^3.6.0\"\nruff = \"^0.1.7\"  \n</code></pre>"},{"location":"dependencies/#dependencies","title":"Dependencies","text":"<ul> <li>python</li> <li> <p>django</p> </li> <li> <p>django-admin-env-notice Used to display environment-specific notices in the Django admin interface. It's useful for distinguishing between different deployments of your Django application, such as development, staging, and production.  PyPi |   GitHub </p> </li> <li> <p>django-allauth a Django package for comprehensive authentication, supporting social and local login with advanced features like signup, email verification, and password management. allauth.org |   ReadTheDocs |   PyPi |   GitHub |    Internal Docs: allauth templates </p> </li> <li> <p>django-auto-logout The django-auto-logout library is a middleware for Django applications that automatically logs out users after a certain period of inactivity.  PyPi |   GitHub</p> </li> <li> <p>django-bootstrap-datepicker-plus This django widget contains Date-Picker, Time-Picker, DateTime-Picker, Month-Picker and Year-Picker input with date-range-picker functionality.  ReadTheDocs |  PyPi</p> </li> <li> <p>django-bootstrap-input-group This is an add-on for django-bootstrap5 for rendering multiple django form fields as a Bootstrap input group.  PyPi |   GitHub |    Internal Docs </p> </li> <li> <p>django-bootstrap5 * The django-bootstrap5 library seamlessly integrates Bootstrap 5 into Django, offering template tags and widgets for quick, responsive UI design without extensive CSS, enhancing web development efficiency.   GitHub |   ReadTheDocs |    Internal Docs * There are two similar libraries available: django-bootstrap5 and django-bootstrap-v5.  The two are almost identical and perform the same function, but the django-bootstrap5 project is preferred because it is the one that is currently being maintained.</p> </li> <li> <p>django-environ a Django utility that simplifies the process of handling environment variables in Django projects.  ReadTheDocs |   PyPi |   GitHub |   TODO: Internal Docs</p> </li> <li> <p>django-htmx HTMX is a JavaScript library that enhances web applications by enabling dynamic, real-time interactions using HTML attributes. It allows you to update parts of a web page without a full page reload. \"django-htmx\" is a Django library that simplifies using HTMX with Django projects, streamlining the integration of real-time features by leveraging HTML attributes and Django views, reducing the need for extensive JavaScript development.  ReadTheDocs |   PyPi |   GitHub |  htmx.org </p> </li> <li> <p>django-import-export Adds tools to the Django-Admin site that allows importing and exporting data between Django models and various formats such as Excel, CSV, JSON, and YAML. It simplifies the process of transferring data to and from Django applications.  ReadTheDocs |   GitHub </p> </li> <li> <p>django-split-settings Organize Django settings into multiple files and directories. Easily override and modify settings. Use wildcards in settings file paths and mark settings files as optional.  ReadTheDocs |   PyPi |   GitHub |   Internal Docs</p> </li> <li> <p>django-timezone-field not using timezone fields anymore. Remove?</p> </li> <li> <p>django-waffle Django Waffle is feature flipper for Django. You can define the conditions for which a flag, switches, or sample should be active, and use them in a number of ways.  ReadTheDocs |   PyPi |   GitHub |  TODO: Internal Docs</p> </li> <li> <p>fitdecode A FIT file parsing and decoding library written in Python3  ReadTheDocs |  GitHub</p> </li> <li> <p>Pendulum Pendulum is a Python package for easier datetime manipulation, offering a more intuitive API, timezone handling, and improved formatting and parsing. pendulum.eustace.io |   PyPi</p> </li> <li> <p>pillow The Python Imaging Library adds image processing capabilities to your Python interpreter.  This library provides extensive file format support, an efficient internal representation, and fairly powerful image processing capabilities. python-pillow.org |   ReadTheDocs |   PyPi |   GitHub</p> </li> <li> <p>psycop2-binary Psycopg is a PostgreSQL adapter for the Python programming language. It is a wrapper for the libpq, the official PostgreSQL client library.  psycopg.org |   PyPi |  Internal Docs </p> </li> <li> <p>pytz Pytz brings the Olson tz database into Python and thus supports almost all time zones. This module serves the date-time conversion functionalities and helps user serving international client\u2019s base. It enables time-zone calculations in our Python applications and also allows us to create timezone aware datetime instances.  PyPi |   GitHub</p> </li> <li> <p>pyyaml PyYAML features a complete YAML 1.1 parser, Unicode support, pickle support, capable extension API, and sensible error messages. PyYAML supports standard YAML tags and provides Python-specific tags that allow to represent an arbitrary Python object. pyyaml.org |   Wiki |   PyPi |   GitHub</p> </li> </ul>"},{"location":"dependencies/#dev-dependencies","title":"Dev Dependencies","text":"<ul> <li>black</li> <li>colorlog</li> <li>coverage</li> <li>flake8</li> <li>isort</li> <li>pre-commit</li> <li>ruff</li> </ul>"},{"location":"dependencies/#prod-dependencies","title":"Prod Dependencies","text":"<ul> <li>gunicorn Gunicorn is a WSGI server for deploying Django projects, acting as an interface between Django applications and Nginx, handling HTTP requests efficiently.  gunicorn.org |  PyPi |   GitHub</li> </ul>"},{"location":"extras/","title":"Extra Details","text":"<p>Extra details on topics are normally linked to from other areas.  The links are provided on this page for convince</p>"},{"location":"extras/#info-django-split-settings","title":"Info: django-split-settings","text":""},{"location":"extras/#info-django-bootstrap5","title":"Info: django-bootstrap5","text":""},{"location":"extras/#info-django-bootstrap-input-group","title":"Info: django-bootstrap-input-group","text":""},{"location":"extras/#info-psycop2-vs-psycop2-binary","title":"Info: psycop2 vs psycop2-binary","text":""},{"location":"extras/#install-mkdocs-locally","title":"Install MkDocs Locally","text":""},{"location":"extras/#disable-logging-temporarily","title":"Disable Logging Temporarily","text":""},{"location":"extras/#email-functionality-in-django-allauth","title":"Email Functionality in Django-Allauth","text":""},{"location":"install_guides/","title":"Installation Guild","text":""},{"location":"install_guides/#development-environment","title":"Development Environment","text":"<ul> <li>Windows PC</li> <li>WSL2</li> <li>Ubuntu-22.04</li> <li>Step by Step Instructions</li> </ul>"},{"location":"install_guides/#production-environment","title":"Production Environment","text":"<ul> <li>DigitalOcean Droplet</li> <li>Ubuntu-22.04</li> <li>Nginx</li> <li>Gunicorn</li> <li>PostgreSQL  </li> <li>Step by Step Instructions</li> </ul>"},{"location":"install_guides/#production-environment-addendums","title":"Production Environment - Addendums","text":"<ul> <li>Add new domain</li> <li>Setup auto SSL certs</li> </ul>"},{"location":"misc/","title":"Miscellaneous Items","text":""},{"location":"misc/#examples","title":"Examples","text":""},{"location":"misc/#checklist","title":"Checklist","text":""},{"location":"misc/#create-django-app-in-subdirectory","title":"Create Django App in Subdirectory","text":""},{"location":"misc/#view-django-error-logs-in-production","title":"View Django Error Logs in Production","text":""},{"location":"misc/#smtp-info","title":"SMTP Info","text":""},{"location":"misc/#domain-hosting-configuration","title":"Domain &amp; Hosting Configuration","text":""},{"location":"misc/#website-analytics-with-umami","title":"Website Analytics with Umami","text":""},{"location":"misc/#seo-tools","title":"SEO Tools","text":""},{"location":"misc/#import-file-fit-gpx-process-details","title":"Import File (.fit &amp; .gpx) Process Details","text":""},{"location":"misc/#sitemaps","title":"Sitemaps","text":""},{"location":"misc/#robotstxt","title":"Robots.txt","text":""},{"location":"misc/#commit-message-examples","title":"Commit Message Examples","text":""},{"location":"misc/#makefile","title":"Makefile","text":""},{"location":"misc/#django-hijack","title":"django-hijack","text":""},{"location":"misc/#deep-dive-streaks","title":"Deep Dive: Streaks","text":""},{"location":"misc/#management-commands","title":"Management Commands","text":""},{"location":"tasks/","title":"Tasks","text":""},{"location":"tasks/#deploy-publish-to-production","title":"Deploy / Publish to Production","text":""},{"location":"tasks/#using-the-django-shell-to-build-db-queries","title":"Using the Django Shell to Build DB Queries","text":""},{"location":"tasks/#updating-changelog","title":"Updating ChangeLog","text":""},{"location":"tasks/#add-kudos-to-project","title":"Add Kudos to Project","text":""},{"location":"tasks/#add-dependencies-to-project","title":"Add Dependencies to Project","text":""},{"location":"tools/","title":"Tools","text":""},{"location":"tools/#makefile","title":"MakeFile","text":""},{"location":"tools/#testing-coverage","title":"Testing &amp; Coverage","text":""},{"location":"tools/#dependency-management-poetry","title":"Dependency Management (Poetry)","text":""},{"location":"tools/#linting-pre-commit","title":"Linting (pre-commit)","text":""},{"location":"tools/#logging","title":"Logging","text":""},{"location":"tools/#project-structure","title":"Project Structure","text":""},{"location":"tools/#tools-for-terminal","title":"Tools for Terminal","text":""},{"location":"tools/#tools-for-working-with-fit-files","title":"Tools for working with .fit files","text":""},{"location":"conventions/branch_naming/","title":"Branch Naming Conventions","text":""},{"location":"conventions/branch_naming/#sample-branch-names","title":"Sample Branch Names","text":"<ul> <li><code>prefix/branch-description-card#</code></li> <li><code>feature/user-authentication</code></li> <li><code>bugfix/fix-header-styling-40</code></li> <li><code>hotfix/security-patch</code></li> </ul>"},{"location":"conventions/branch_naming/#basic-rules","title":"Basic Rules","text":"<ul> <li>Lowercase and Hyphen-separated</li> <li>Alphanumeric Characters (a-z, 0-9)</li> <li>Descriptive</li> </ul>"},{"location":"conventions/branch_naming/#branch-prefixes","title":"Branch Prefixes","text":"<ul> <li>Bugfix Branches used for fixing bugs <code>bugfix/</code></li> <li>Hotfix  Branches that are made directly from production branch to fix critical bugs in production environment <code>hotfix/</code></li> <li>Release Branches created to prepare for a new release of the software. These branches typically include final testing and stabilization before a release is made. <code>release/verision_0.1.9-alpha</code></li> <li>Refactor  Branches created to refactor code without changing its external behavior. This can include restructuring code for readability, performance improvements, or adherence to coding standards. <code>refactor/</code></li> <li>Documentation Branches created for updating or adding documentation, such as README files, user guides, or API documentation. <code>doc/</code> or <code>documentation/</code></li> <li>Experiment Branches created for experimental or exploratory development work. These branches are used for trying out new ideas or technologies without affecting the main codebase. <code>experiment/</code> </li> <li>Integration Branches created for integrating changes from multiple developers or teams. These branches are often used in larger projects with multiple contributors to coordinate changes before merging into the main branch. <code>integration/</code> </li> <li>Test Branches created specifically for testing purposes, such as running automated tests or conducting manual QA testing <code>test/</code> </li> <li>Chore Branches created for miscellaneous tasks or housekeeping activities, such as updating dependencies, configuring build scripts, or cleaning up code. <code>chore/</code> </li> </ul>"},{"location":"conventions/branch_naming/#cardticket-numbers-optional","title":"Card/Ticket Numbers (optional)","text":"<ul> <li>Reference Trello Card Number or Ticket Numbers at end of branch name</li> </ul>"},{"location":"conventions/branch_naming/#citations","title":"Citations","text":"<p> - Naming conventions for Git Branches \u2014 a Cheatsheet </p>"},{"location":"conventions/commit_messages/","title":"Commit Messages","text":"<p>Using prefixes in commit messages is a common practice in many development workflows to categorize the nature of the commit. This helps in understanding the purpose of the commit at a glance, and can be particularly useful when generating changelogs, reviewing commits, or managing releases. Here are some commonly used prefixes:</p> <p>* Specific examples of common commit messages can be found here</p> <ol> <li> <p>feat: A new feature for the user. Example: feat: add user profile page</p> </li> <li> <p>fix: A bug fix. Example: fix: resolve issue with login validation  </p> </li> <li> <p>docs: Changes to documentation. Example: docs: update README with new setup instructions  </p> </li> <li> <p>style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.). Examples:          style: apply PEP 8 and linting standards for improved code readability and consistency          style: format code with Prettier          style: Apply linting fixes across the codebase          style: Ensure code adheres to PEP 8 standards          style: Fix indentation and spacing issues          style: Correct import order and remove unused imports          style: Standardize docstring formats          style: Address minor stylistic inconsistencies  </p> </li> <li> <p>refactor: A code change that neither fixes a bug nor adds a feature. Example: refactor: improve performance of data processing  </p> </li> <li> <p>perf: A code change that improves performance. Example: perf: optimize image loading  </p> </li> <li> <p>test: Adding missing tests or correcting existing tests. Example: test: add unit tests for UserService  </p> </li> <li> <p>build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm). Example: build: update webpack configuration  </p> </li> <li> <p>ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs). Example: ci: add GitHub Actions for automated testing  </p> </li> <li> <p>chore: Other changes that don\u2019t modify src or test files (example scopes: updating dependencies). Example:     chore: update dependencies using poetry-lock and poetry-export pre-commit hooks     chore: update poetry.lock and requirements.txt using poetry-lock and poetry-export pre-commit hooks     chore: update project dependencies  </p> </li> <li> <p>revert: Reverts a previous commit. Example: revert: revert commit 1234abcd  </p> </li> <li> <p>hotfix: A critical fix that needs to be deployed immediately. Example: hotfix: patch security vulnerability  </p> </li> </ol> <p>These prefixes help maintainers and collaborators quickly understand the intent and scope of changes. They are especially useful when combined with a tool like Conventional Commits, which enforces a standard format for commit messages. This can also assist in automating release notes and versioning using tools like semantic-release.</p>"},{"location":"conventions/commit_messages/#citations","title":"Citations","text":"<p> OpenAI. (2024). ChatGPT (GPT-4o) [Large language model]. </p>"},{"location":"extras/disable_log_messages/","title":"Disable Logging Temporarily","text":"<p>If you want to disable logging temporarily within a specific test to prevent a warning from being printed to the console, you can use the logging.disable function within a context manager. This will only suppress logging for the duration of the test, allowing you to isolate the effect to the specific test case.</p> <p>Error messages can be disabled for the entire TestCase: <pre><code>def setUp(self):\n    \"\"\"Set up test data.\"\"\"\n    # Disable logging for all tests in this class\n    logging.disable(logging.error)\n</code></pre></p> <p>or Error messages can be disabled in a specific test</p> <pre><code>def test_custom_404_page(self):\n    \"\"\"Test that the custom 404 page is rendered correctly.\"\"\"\n    # This test will generate an expected warning:\n    # \"WARNING django.request Not Found: /nonexistent-page/\"\n    # Disable logging to prevent warning from being printed to console\n    logging.disable(logging.WARNING)\n\n    response = self.client.get(\"/nonexistent-page/\")\n    self.assertEqual(response.status_code, 404)\n    self.assertContains(response, \"Whoops\", status_code=404)\n</code></pre>"},{"location":"extras/django-split-settings/","title":"django-split-settings","text":"<p>SkillsHats: Efficient Django Project Settings with Split Settings Library</p> <ul> <li>Settings becomes it's own module within the Core App</li> <li>Settings are configured in the __init__.py file of the Settings module</li> <li>Settings are broken into multiple setting_name.py files.</li> <li>Settings files can be created based on setting type (ie common, db, email, logging, etc) or environment (ie dev, staging, prod) or optional (ie local_settings)</li> </ul> Directory Structure (as of 1/25/2024)<pre><code>project  \n    core  \n        settings\n            __init__.py\n            common.py\n            database.py\n            dev_development.py\n            local_settings.py\n            logging.py\n            smtp.py\n</code></pre> __init__.py (as of 1/25/2024)<pre><code>\"\"\"\nDjango Settings Configuration using django-split-settings.\n\nFor more information on django-split-settings, visit:\nhttps://github.com/sobolevn/django-split-settings\n\nThis file serves as the main entry point for Django settings,\norganizing configurations into modular files for better maintainability.\n\nDefault environment is set to 'development'.\n\nUsage\n-----\n- Standard Django settings are configured in 'common.py'.\n- PostgreSQL settings are configured in 'database.py'.\n- SMTP settings are configured in 'smtp.py'.\n- Logging settings are configured in 'logging.py'.\n- Environment-specific settings can be defined in 'env_{DJANGO_ENV}.py'.\n- Local overrides (not in version control) can be placed in 'local_settings.py'.\n\nTo customize settings for specific environments or scenarios, modify the\nrespective configuration files mentioned above.\n\"\"\"\n\nimport os\nfrom pathlib import Path\n\nimport environ\nfrom split_settings.tools import include, optional\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent.parent\n\n# Initialize environment variables\nenv = environ.Env()\n\n# Read environment variables from the .env file in the 'core' directory\nenviron.Env.read_env(os.path.join(BASE_DIR, \"core/.env\"))\n\n# Retrieve the current environment or default to 'development'\nDJANGO_ENV = env(\"DJANGO_ENV\") or \"development\"\n\n# Define the list of base settings files to include\nbase_settings = [\n    \"common.py\",  # standard django settings\n    \"database.py\",  # postgres\n    \"smtp.py\",  # smtp\n    \"logging.py\",  # logging\n    optional(f\"env_{DJANGO_ENV}.py\"),  # environment-specific settings\n    optional(\"local_settings.py\"),  # local overrides (not in version control)\n]\n\n# Include settings by passing the list of base settings files\ninclude(*base_settings)\n</code></pre>"},{"location":"extras/django_allauth/","title":"Django-Allauth","text":""},{"location":"extras/django_allauth/#template-info","title":"Template Info","text":"<p>django-allauth provides a range of templates used for handling account management and authentication tasks. Here\u2019s a list of the primary templates that you might want to customize in your Django project:</p>"},{"location":"extras/django_allauth/#account-management","title":"Account Management","text":"<ul> <li>login.html: Used for the login page.</li> <li>signup.html: Used for user registration.</li> <li>logout.html: Displays a logout confirmation.</li> <li>password_change.html: For changing an existing password.</li> <li>password_change_done.html: Confirmation that the password has been changed.</li> <li>password_reset.html: For initiating a password reset.</li> <li>password_reset_done.html: Confirms that a password reset email has been sent.</li> <li>password_reset_from_key.html: Allows entering a new password using a reset key received by email.</li> <li>password_reset_from_key_done.html: Confirmation that the password has been reset successfully.</li> </ul>"},{"location":"extras/django_allauth/#email-management","title":"Email Management","text":"<ul> <li>email.html: Page to manage email addresses (add, remove, set primary).</li> <li>email_confirm.html: Confirmation page for when a user adds a new email address.</li> <li>email_confirmation_done.html: Page shown after a user has confirmed their email address.</li> <li>email_confirmation_subject.txt: Subject line template for the email confirmation email.</li> <li>email_confirmation_message.txt: Email body template for the email confirmation email.</li> <li>email_confirmation_signup_subject.txt: Subject template for the email confirmation on signup.</li> <li>email_confirmation_signup_message.txt: Email body template for the confirmation on signup.</li> </ul>"},{"location":"extras/django_allauth/#social-account-management-if-using-allauthsocialaccount","title":"Social Account Management (If using allauth.socialaccount)","text":"<ul> <li>connections.html: Manages connections to social accounts.</li> <li>login_cancelled.html: Shown if social login is cancelled.</li> <li>login_error.html: Displays errors during the social login process.</li> <li>signup.html: Additional signup form used when signing up via a social account, if additional information is required.</li> </ul>"},{"location":"extras/django_allauth/#template-location","title":"Template Location","text":"<p>These templates are located inside the djgano-allauth package found at .venv/lib/python3.12/site-packages/allauth.  Templates are located within the templates/account/ and templates/socialaccount/ directories. To override these templates, you should replicate the same directory structure within your project's templates directory. For example, to override the signup template for account management, you would place your custom signup.html in your_project/templates/account/signup.html.</p> <p>By customizing these templates, you can provide a user experience that fits seamlessly with the rest of your site\u2019s design and meets your project's specific needs.</p>"},{"location":"extras/django_waffles/","title":"Django-Waffle","text":""},{"location":"extras/django_waffles/#todo-complete-this-document","title":"TODO: Complete this document","text":""},{"location":"extras/email/","title":"Email Functionality in Django-Allauth","text":"<p>Django-Allauth is a robust library that provides authentication, registration, and account management for Django projects. One of the essential features of this library is its support for sending transactional emails, such as verification emails, password reset emails, and more. Here\u2019s a brief overview of how email functionality works in a Django-Allauth project and how you can customize email templates.</p>"},{"location":"extras/email/#default-email-templates","title":"Default Email Templates","text":"<p>By default, Django-Allauth includes plain text (.txt) message templates for various email types. These templates are used to send transactional emails without requiring any additional setup. The templates are originally found in the Django-Allauth library but are moved into the project folder to be customized.  They can be found in the following directory:</p> <pre><code>project/templates/account/email\n</code></pre>"},{"location":"extras/email/#customizing-email-templates","title":"Customizing Email Templates","text":"<p>If you wish to customize the email templates to better fit your project's needs, you can move the default templates from the Django-Allauth package into your project's templates directory and modify them as necessary.</p>"},{"location":"extras/email/#html-email-templates","title":"HTML Email Templates","text":"<p>Django-Allauth only comes out-of-the-box with text (.txt) message templates. If you want to send emails using HTML, you need to create the HTML templates yourself. For each email type, you should have two versions of the template:</p> <p>A plain text version (e.g., email_confirmation.txt) An HTML version (e.g., email_confirmation.html) When both plain text and HTML templates are provided, Django-Allauth will send multipart emails containing both text and HTML versions. This ensures that recipients who prefer plain text emails or whose email clients do not support HTML will still receive the content of the email.</p>"},{"location":"extras/email/#base-templates-and-extending","title":"Base Templates and Extending","text":"<p>Django-Allauth supports the use of base templates to streamline the process of creating consistent email designs. You can define a base message template for both text and HTML formats:</p> <p>base_message.txt base_message.html</p> <p>Other email templates can then extend these base templates, allowing you to maintain a consistent look and feel across all your emails while only needing to update the base templates when making global changes.</p>"},{"location":"extras/email/#templates-with-subject-templates","title":"Templates with Subject Templates","text":"<p>In Django-Allauth, some emails use base templates, specific email-type templates, and subject templates. This allows for flexible customization of your emails.</p> <p>Base Templates Base templates provide a consistent structure and should include both HTML and text versions: <pre><code>base_message.html\nbase_message.txt\n</code></pre> Specific Email-Type Templates To send HTML emails, both the base and specific email-type templates must have HTML versions: <pre><code>email_confirmation_message.html\nemail_confirmation_message.txt\n</code></pre> Subject Templates Subject templates define the email subject line and only need a text version: <pre><code>email_confirmation_subject.txt\n</code></pre></p> <p>Example Directory Structure <pre><code>project/\n\u2514\u2500\u2500 templates/\n    \u2514\u2500\u2500 account/\n        \u2514\u2500\u2500 email/\n            \u251c\u2500\u2500 base_message.html\n            \u251c\u2500\u2500 base_message.txt\n            \u251c\u2500\u2500 email_confirmation_message.html\n            \u251c\u2500\u2500 email_confirmation_message.txt\n            \u251c\u2500\u2500 email_confirmation_subject.txt\n            \u2514\u2500\u2500 ...\n</code></pre> This structure ensures your emails are well-formatted and compatible with various email clients.</p>"},{"location":"extras/email/#example-directory-structure","title":"Example Directory Structure","text":"<p>Here\u2019s an example directory structure for your email templates:</p> <pre><code>project/\n\u2514\u2500\u2500 templates/\n    \u2514\u2500\u2500 account/\n        \u2514\u2500\u2500 email/\n            \u251c\u2500\u2500 base_message.txt\n            \u251c\u2500\u2500 base_message.html\n            \u251c\u2500\u2500 email_confirmation_message.txt\n            \u251c\u2500\u2500 email_confirmation_message.html\n            \u251c\u2500\u2500 password_reset_key_message.txt\n            \u251c\u2500\u2500 password_reset_key_message.html\n            \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"extras/email/#sending-test-emails","title":"Sending Test Emails","text":"<p>You can use a custom management commands to send test emails for each type to verify that your templates are working correctly. Here is an example of how to use the provided Makefile commands to send test emails:</p> <pre><code>make test_email type=email_confirmation\nmake test_email type=password_reset\n</code></pre> <p>By setting up your templates in this manner, you can ensure that all your transactional emails have a professional and consistent appearance, improving the overall user experience.</p>"},{"location":"extras/forms-w-django-bootstrap-input-group/","title":"How to use forms with django-bootstrap-input-group","text":"<p>pypi.org | github </p>"},{"location":"extras/forms-w-django-bootstrap-input-group/#define-field_group-in-formclass","title":"Define Field_group in FormClass","text":"forms.py<pre><code>class RideForm(ModelForm): \n\n    class Meta:\n        model = Activity\n        exclude = (\n            ...\n        ) \n\n    timestamp = forms.DateTimeField(\n        required=True,\n        widget=DateTimePickerInput(\n            attrs={\"class\": \"form-control\"},\n            options={\n                \"format\": \"MM/DD/YYYY hh:mm A\",\n                \"showClose\": True,\n                \"showClear\": True,\n            },\n        ),\n    )\n    ride_name = forms.CharField(\n        label=\"Ride Name\",\n        max_length=200,\n        required=True,\n    )\n    distance = forms.FloatField(\n        label=\"Distance\",\n        min_value=0,\n        required=True,\n    )\n    unit_distance = forms.ChoiceField(\n        choices=[(\"kilometers\", \"kilometers\"), (\"miles\", \"miles\")],\n        label=\"Unit of Measurement\",\n    )\n    duration = forms.DurationField(\n        label=\"Ride Duration\",\n        help_text=\"h:m:s\",\n        required=True,\n    )\n    elevation = forms.IntegerField(\n        label=\"Elevation Gained\",\n        min_value=0,\n        required=False,\n    )\n    unit_elevation = forms.ChoiceField(\n        choices=[(\"meters\", \"meters\"), (\"feet\", \"feet\")], label=\"Unit of Measurement\"\n    )\n    calories = forms.IntegerField(\n        label=\"Calories\",\n        min_value=0,\n        required=False,\n    )\n\n    # define fields to be used and their order and their grouping\n    field_groups = [\n        \"timestamp\",\n        \"ride_name\",\n        (\"Distance\", (\"distance\", \"unit_distance\")),\n        \"duration\",\n        (\"Elevation\", (\"elevation\", \"unit_elevation\")),\n        \"calories\",\n    ]\n</code></pre> view.py<pre><code>class SimpleCreateView(LoginRequiredMixin, CreateView)\n    \"\"\"Simple CreateView.  Do your normal stuff here\"\"\"\n\n    model = Doc\n    success_url = reverse_lazy(\"habits:list\")\n    form_class = HabitForm\n    template_name = \"template/dj_bs5.html\"\n\n    ...\n    ...\n</code></pre> template/dj_bs_input_group.html<pre><code>{% extends \"include/base.html\" %}\n&lt;!-- load extra input_group template tags in additon --&gt;\n{% load django_bootstrap5 django_bootstrap_input_group %}\n\n{% block content %}\n&lt;div class=\"container\"&gt;\n    &lt;h2&gt;Your Form&lt;/h2&gt;\n\n    {{ form.media }}\n\n    &lt;form method=\"post\"&gt;\n        {% csrf_token %}\n\n        {% bootstrap_grouped_form form layout=layout %}\n\n        &lt;button type=\"submit\"&gt;Save Changes&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n\n{% endblock content %}\n</code></pre>"},{"location":"extras/forms-w-django-bootstrap5/","title":"How to use forms with django-bootstrap5","text":"<p>github | readthedocs</p>"},{"location":"extras/forms-w-django-bootstrap5/#simple-form-with-django-bootstrap5","title":"Simple Form with django-bootstrap5","text":"forms.py<pre><code>class SimpleForm(forms.Form)\n    \"\"\"Simple Form or ModelForm field displayed as defined in this class\"\"\"\n\n    timestamp = forms.DateTimeField(\n        required=True,\n        widget=DateTimePickerInput(attrs={\"class\": \"form-control\"}),\n    )\n    ride_title = forms.CharField(\n        label=\"Ride Title\",\n        max_length=200,\n        required=False,\n    )\n    distance = forms.FloatField(\n        label=\"Distance\",\n        min_value=0,\n        required=True,\n    )\n    duration = forms.DurationField(\n        label=\"Ride Duration\",\n        help_text=\"h:m:s\",\n        required=True,\n    )\n    elevation = forms.IntegerField(\n        label=\"Elevation Gained\",\n        min_value=0,\n        required=False,\n    )\n    calories = forms.IntegerField(\n        label=\"Calories\",\n        min_value=0,\n        required=False,\n    )\n</code></pre> view.py<pre><code>class SimpleCreateView(LoginRequiredMixin, CreateView)\n    \"\"\"Simple CreateView.  Do your normal stuff here\"\"\"\n\n    model = Doc\n    success_url = reverse_lazy(\"habits:list\")\n    form_class = HabitForm\n    template_name = \"template/dj_bs5.html\"\n\n    ...\n    ...\n</code></pre> template/dj_bs5.html<pre><code>{% extends \"include/base.html\" %}\n{% load django_bootstrap5 %}\n\n{% block content %}\n&lt;div class=\"container\"&gt;\n    &lt;h2&gt;Your Form&lt;/h2&gt;\n\n    {{ form.media }}\n\n    &lt;form method=\"post\"&gt;\n        {% csrf_token %}\n\n        {% bootstrap_form form %} &lt;!--displays all fields as defined in forms.py--&gt;\n\n        &lt;button type=\"submit\"&gt;Save Changes&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n{% endblock content}\n</code></pre>"},{"location":"extras/forms-w-django-bootstrap5/#custom-form-with-django-bootstrap5","title":"Custom Form with django-bootstrap5","text":"template/define_each_field.html<pre><code>{% extends \"include/base.html\" %}\n{% load django_bootstrap5 %}\n\n{% block content %}\n&lt;div class=\"container\"&gt;\n    &lt;h2&gt;Your Form&lt;/h2&gt;\n\n    {{ form.media }}\n\n    &lt;form method=\"post\"&gt;\n        {% csrf_token %}\n\n        {% bootstrap_form_errors form %}\n        {% bootstrap_field form.username %}\n        {% bootstrap_field form.email %}\n        {% bootstrap_field form.password1 addon_after=\"&lt;i class='bi bi-eye-slash' id='togglePassword1' onclick='togglePassword1()''&gt;&lt;/i&gt;\" %}\n        {% bootstrap_field form.password2 addon_after=\"&lt;i class='bi bi-eye-slash' id='togglePassword2' onclick='togglePassword2()''&gt;&lt;/i&gt;\" %}\n\n        &lt;button type=\"submit\"&gt;Save Changes&lt;/button&gt;\n\n    &lt;/form&gt;\n&lt;/div&gt;\n{% endblock content}\n</code></pre>"},{"location":"extras/mkdocs_install_locally/","title":"Mkdocs install locally","text":"<ol> <li> <p>Clone the repository:</p> <pre><code>git clone [repository_url]\n</code></pre> </li> <li> <p>Navigate to the Project directory</p> <pre><code>cd beats_docs\n</code></pre> </li> <li> <p>Create and activate a virtual environment</p> <pre><code>python3 -m venv _env\nsource _env/bin/activate\n</code></pre> </li> <li> <p>Install dependencies     <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Run Server <pre><code>mkdocs serve --dev-addr=127.0.0.1:8001\n</code></pre></p> </li> <li>Local URL:  http://127.0.0.1:8001/</li> </ol>"},{"location":"extras/psycopg2-binary_vs_psycopg2/","title":"Psycopg2 binary vs psycopg2","text":"<p>psycopg2-binary and psycopg2 are both Python database adapters for PostgreSQL, and they serve the same primary purpose of enabling Python applications to interact with PostgreSQL databases. However, there are some differences between the two:</p> <ol> <li>psycopg2-binary:<ul> <li>psycopg2-binary is a pre-built binary distribution of the psycopg22 library, including the C extensions necessary for PostgreSQL database connections.</li> <li>It is convenient to use because you don't need to compile anything during installation. You can install it with a simple pip command.</li> <li>It bundles the necessary PostgreSQL client library, so you don't need to separately install PostgreSQL or its development headers.</li> </ul> </li> <li>psycopg2:<ul> <li>psycopg2 is the original PostgreSQL adapter for Python.</li> <li>It is not a pre-built binary, so it requires compilation during installation, which might involve installing PostgreSQL development headers and libraries.</li> <li>Some users prefer using psycopg2 in production environments for better control over the PostgreSQL client library versions and customization options.  </li> </ul> </li> </ol> <p>Choosing between psycopg2-binary and psycopg2 depends on your specific use case:</p> <ul> <li>For development and ease of use, especially in environments like development or testing, psycopg2-binary is a convenient choice as it simplifies installation and doesn't require additional dependencies.</li> <li>For production environments where you need precise control over library versions and have specific configuration requirements, you might opt for psycopg2 to have more control over the compilation process and library compatibility.</li> </ul> <p>Ultimately, the choice between the two often comes down to your project's specific needs and deployment requirements. Both libraries provide robust PostgreSQL connectivity for Python, so you can choose the one that best suits your use case.</p>"},{"location":"install_guides/add_new_domain/","title":"Installation Guide - Production Environment - Addendum","text":""},{"location":"install_guides/add_new_domain/#adding-a-new-domain-to-the-server","title":"Adding a New Domain to the Server","text":""},{"location":"install_guides/add_new_domain/#configure-nginx","title":"Configure Nginx","text":"<p>You need or update the Nginx server block (sometimes called a \"virtual host\") for your domain. </p> <ul> <li>You can start by editing the new configuration file: <pre><code>sudo micro /etc/nginx/sites-available/beats\n</code></pre></li> <li>Then, update the server configuration.  beats<pre><code>server {\n    listen 80;\n    server_name 159.65.189.23 newdomain.com, www.newdomain.com;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        alias /home/rocket/beats/project/static/;\n    }\n\n    location /media/ {\n        alias /home/rocket/beats/project/media/;\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/run/gunicorn.sock;\n    }\n}\n</code></pre></li> <li>Test the Configuration: Always test your Nginx configuration for syntax errors after making changes: <pre><code>sudo nginx -t\n</code></pre> expected output<pre><code>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n</code></pre></li> <li>Reload Nginx: If the configuration test passes, reload Nginx to apply the changes without stopping the server: Alias to restart both nginx &amp; gunicorn<pre><code>restart\n</code></pre> -- or -- <pre><code>sudo systemctl reload nginx\n</code></pre></li> </ul>"},{"location":"install_guides/install_guide_dev/","title":"Installation Guide - Development Environment","text":"<p>* TODO: This process has not been tested</p> <ol> <li>Clone the Repository:     <pre><code>git clone [repository_url]\n</code></pre></li> <li>Navigate to the Project Directory:     <pre><code>cd beats\n</code></pre></li> <li>Install Dependencies with Poetry: * install poetry if necessary Poetry <pre><code>pip install poetry\n</code></pre> <pre><code>poetry install --no-root\n</code></pre> * This command installs the project's dependencies defined in pyproject.toml without including the root project itself.</li> <li>Activate the Virtual Environment:     <pre><code>poetry shell\n</code></pre></li> <li> <p>Apply Database Migrations:     * using makefile target <pre><code>make migrations\n</code></pre></p> </li> <li> <p>Create log director for use with the Mock Production env. (optional)     <pre><code>mkdir -p /path/to/your/project/logs\nchmod 755 /path/to/your/project/logs\n</code></pre></p> </li> <li>Run the Development Server:     * using makefile target <pre><code>make run\n</code></pre>     local server url: 127.0.0.1:8000</li> </ol> <p>This project was setup using a combination of the the process I defined in the following  gist as well new tools such as poetry, makefiles and pre-commit (and associated linting tools) that are described in the followign youtube tutorial.</p> <p> Pro Django - Tutorial |  Setting up a new project</p>"},{"location":"install_guides/install_guide_prod/","title":"Installation Guide for Production Environment","text":""},{"location":"install_guides/install_guide_prod/#step-by-step-guide","title":"Step by Step Guide","text":"<ol> <li> <p>Digital ocean droplet https://docs.digitalocean.com/products/droplets/how-to/create/</p> </li> <li> <p>Connect to droplet and initial setup https://docs.digitalocean.com/products/droplets/how-to/connect-with-ssh/ </p> <ul> <li>Logging in as root <pre><code>ssh root@your_server_ip\n</code></pre></li> <li>Creating a New User <pre><code>adduser rocket\n</code></pre></li> <li>Granting Admin Rights <pre><code>usermod -aG sudo rocket\n</code></pre></li> <li>setup ssh keys https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account/</li> <li>connect to droplet <pre><code>ssh -i /home/justtim/.ssh/digital_ocean_iris rocket@164.90.133.49\n</code></pre></li> <li>or create an alias To create an alias for the SSH command, you can add the following line to your shell profile file (e.g., ~/.bashrc for Bash or ~/.zshrc for Zsh): <pre><code>alias remote=\"ssh -i /home/justtim/.ssh/digital_ocean_iris rocket@164.90.133.49\"\n</code></pre> alias<pre><code>remote\n</code></pre></li> </ul> </li> <li> <p>Setup new machine https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-22-04 https://gist.github.com/bradtraversy/cfa565b879ff1458dba08f423cb01d71 </p> <ul> <li>setup firewall</li> <li>Enable access for new user</li> <li>disable root user</li> <li>add ssh-key for local-machine to access remote </li> </ul> </li> <li> <p>Make Pretty and More Better *optional This droplet should be around for awhile.  When your confident it will be you can add some things to make it nicer.</p> <ul> <li>starship.rs  </li> <li>micro </li> </ul> </li> <li> <p>Setup new machine with Django, Postgres, Nginx &amp; Gunicorn</p> <ul> <li> <p>https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-22-04</p> </li> <li> <p>install python3.12 (https://www.linuxtuto.com/how-to-install-python-3-12-on-ubuntu-22-04/)</p> </li> <li>Update &amp; install packages (python3.12) <pre><code>sudo apt update\nsudo apt install python3.12-venv python3.12-dev libpq-dev postgresql postgresql-contrib nginx curl\n</code></pre></li> <li>Create the PostgreSQL DB &amp; User</li> <li>add ssh-key for remote to access github</li> </ul> </li> <li> <p>Clone Repo</p> <ul> <li>clone repo to /home/rocket/beats</li> <li>Create &amp; activate Virtual Env  <pre><code>python3.12 -m venv _env\n</code></pre></li> <li>switch to production branch</li> <li>update .env file (DB_HOST=127.0.0.1)</li> </ul> </li> <li> <p>Setup Django</p> <ul> <li>Run migrations</li> <li>create superuser</li> <li>collectstatic</li> </ul> </li> <li> <p>Create log directory     <pre><code>mkdir -p /home/_user_/beats/project/logs\nchmod 755 /home/_user_/beats/project/logs\n</code></pre></p> </li> <li> <p>Test Server</p> <ul> <li>sudo ufw allow 8000</li> <li>python manage.py runserver 0.0.0.0:8000</li> <li>view server @ http://ip_or_url:8000/</li> <li>sudo ufw delete allow 8000</li> </ul> </li> <li> <p>Gunicorn Setup</p> <ul> <li>pip install gunicorn </li> <li>TODO: how to deal with this and other production only dependencies</li> <li>Open gunicorn.socket file and add this code to the file <pre><code>sudo micro /etc/systemd/system/gunicorn.socket\n</code></pre> code to be added to gunicorn.socket<pre><code>[Unit]\nDescription=gunicorn socket\n\n[Socket]\nListenStream=/run/gunicorn.sock\n\n[Install]\nWantedBy=sockets.target\n</code></pre></li> <li> <p>Open gunicorn.service file and this code to the file <pre><code>sudo micro /etc/systemd/system/gunicorn.service\n</code></pre> code to be added to gunicorn.service<pre><code>[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=rocket\nGroup=www-data\nWorkingDirectory=/home/rocket/beats\nExecStart=/home/rocket/beats/_env/bin/gunicorn \\\n                --access-logfile /var/log/gunicorn/access.log \\\n                --log-file /var/log/gunicorn/error.log \\\n                --workers=3 \\\n                --bind unix:/run/gunicorn.sock \\\n                project.core.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> pay close attention to lines 7, 9-10, &amp; 15.</p> </li> <li> <p>Start and enable Gunicorn socket <pre><code>sudo systemctl start gunicorn.socket\nsudo systemctl enable gunicorn.socket\n</code></pre></p> </li> <li>Check status of guinicorn <pre><code>sudo systemctl status gunicorn.socket\n</code></pre></li> <li>Check the existence of gunicorn.sock <pre><code>file /run/gunicorn.sock\n</code></pre></li> </ul> </li> <li> <p>Nginx Setup</p> <ul> <li> <p>Create project file and add this code to it. <pre><code>sudo micro /etc/nginx/sites-available/beats\n</code></pre> code to be added to beats<pre><code>server {\n    listen 80;\n    server_name 159.65.189.23;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        alias /home/rocket/beats/project/static/;\n    }\n\n    location /media/ {\n        alias /home/rocket/beats/project/media/;\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/run/gunicorn.sock;\n    }\n}\n</code></pre> pay close attention to lines 3, 7, &amp; 11.</p> </li> <li> <p>Enable the file by linking to the sites-enabled dir <pre><code>sudo ln -s /etc/nginx/sites-available/beats /etc/nginx/sites-enabled\n</code></pre></p> </li> <li>Test NGINX config <pre><code>sudo nginx -t\n</code></pre></li> <li>Restart NGINX <pre><code>sudo systemctl restart nginx\n</code></pre></li> <li>Setup Firewall for Nginx (and remove port 8000 if you haven't already) <pre><code>sudo ufw delete allow 8000\nsudo ufw allow 'Nginx Full'\nsudo ufw status\n</code></pre></li> <li>You will probably need to up the max upload size to be able to create listings with images<ul> <li>Open up the nginx conf file <pre><code>sudo micro /etc/nginx/nginx.conf\n</code></pre></li> <li>Add this to the http{} area <code>client_max_body_size 20M;</code> </li> </ul> </li> <li>Reload NGINX <pre><code>sudo systemctl restart nginx\n</code></pre></li> <li>Possible issues with media files not showing up.  Try this  <pre><code>sudo rm -rf media/photos\n</code></pre></li> </ul> </li> <li> <p>Spend three days troubleshooting the 502 Bad Gateway Errors and issues with  serving static files </p> <ul> <li>Error in wsgi.py. wsgi.py<pre><code>import os\n\nfrom django.core.wsgi import get_wsgi_application\n\n- os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"core.settings\")\n+ os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"project.core.settings\")\n\napplication = get_wsgi_application()\n</code></pre></li> <li> <p>Issues with permissions for the www-data user and the media &amp; static directories.  </p> <ul> <li>The www-data user needs read and probably write permissions to static.  </li> <li>The www-data user needs read/write permissions to media.  </li> <li>The www-data user needs execute permission to the entire project directory (allows access to directory without accessing individual files)</li> </ul> </li> <li> <p>Add enctype=\"mutipart/form\" to any forms saving files to media (e.g., profile avatars in profile forms) <pre><code>&lt;form method=\"post\" enctype=\"multipart/form\"&gt;\n</code></pre></p> </li> </ul> </li> </ol>"},{"location":"install_guides/install_guide_prod/#sources-for-the-step-by-step-guide","title":"Sources for the Step by Step Guide:","text":"<ul> <li> <p>https://docs.digitalocean.com/products/droplets/how-to/create/  </p> </li> <li> <p>https://docs.digitalocean.com/products/droplets/how-to/connect-with-ssh/  </p> </li> <li> <p>https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-22-04   </p> </li> <li> <p>https://www.digitalocean.com/community/tutorials-how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-22-04   </p> </li> <li> <p>https://gist.github.com/bradtraversy/cfa565b879ff1458dba08f423cb01d71    </p> </li> </ul>"},{"location":"install_guides/install_guide_prod/#commands","title":"Commands","text":""},{"location":"install_guides/install_guide_prod/#start-stop-status","title":"Start / Stop / Status","text":"<p>restart nginx &amp; gunicorn<pre><code>sudo systemctl restart gunicorn\nsudo systemctl restart nginx\n</code></pre> start &amp; enable gunicorn.socket<pre><code>sudo systemctl start gunicorn.socket\nsudo systemctl enable gunicorn.socket\nsudo systemctl status gunicorn.socket\n</code></pre> restart gunicorn<pre><code>sudo systemctl restart gunicorn\nsudo systemctl status gunicorn\n</code></pre> restart nginx<pre><code>sudo systemctl restart nginx\nsudo systemctl status nginx\n</code></pre></p>"},{"location":"install_guides/install_guide_prod/#view-logs","title":"View Logs","text":"<p>nginx access.log<pre><code>sudo tail -f /var/log/nginx/access.log\n</code></pre> nginx error.log<pre><code>sudo tail -f /var/log/nginx/error.log\n</code></pre> gunicorn error.log<pre><code>sudo tail -f /var/log/gunicorn/error.log\n</code></pre></p>"},{"location":"install_guides/install_guide_prod/#edit-commands","title":"Edit Commands","text":"<p>edit nginx site config<pre><code>sudo micro /etc/nginx/sites-available/beats\n</code></pre> edit gunicorn.socket<pre><code>sudo micro /etc/systemd/system/gunicorn.socket\n</code></pre> edit gunicorn.service<pre><code>sudo micro /etc/systemd/system/gunicorn.service\n</code></pre></p>"},{"location":"install_guides/install_guide_prod/#misc","title":"Misc","text":"<p>reload daemon<pre><code>sudo systemctl daemon-reload\n</code></pre> Permission denied (publickey)<pre><code> eval \"$(ssh-agent -s)\"\n ssh-add ~/.ssh/github_droplet\n ssh-add -l\n</code></pre></p>"},{"location":"install_guides/setup_auto_ssl_certs/","title":"Installation Guide - Production Environment - Addendum","text":""},{"location":"install_guides/setup_auto_ssl_certs/#setting-up-automatic-ssl-certificates-for-a-new-domain-using-lets-encrypt-and-certbot","title":"Setting up automatic SSL certificates for a new domain using Let's Encrypt and Certbot","text":"<p>Certbot is a free, open-source software tool for automatically using Let's Encrypt certificates on manually-administrated websites to enable HTTPS.</p> <ul> <li>Follow this How to from Digital Ocean  How To Use Certbot Standalone Mode to Retrieve Let's Encrypt SSL Certificates on Ubuntu 22.04</li> <li>Note you need to get certs for both newdomain.com &amp; www.newdomain.com.  This changes the command in step 2 of the above how-to. <pre><code>sudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n</code></pre></li> </ul>"},{"location":"install_guides/setup_auto_ssl_certs/#more","title":"More","text":"<p>Check Auto-Renew Timer<pre><code>sudo systemctl status snap.certbot.renew.service\n</code></pre> Dry Run<pre><code>sudo certbot renew --dry-run\nsudo certbot renew --nginx --dry-run  # remove --dry-run for actual renewal\n</code></pre>  How To Secure Nginx with Let's Encrypt on Ubuntu 22.04</p>"},{"location":"misc/checklist/","title":"Documentation Checklist","text":"<p>Provided by ChatGPT</p> <p>Certainly! Documenting a Django website is crucial for maintaining and enhancing the project over time. Here are some best practices for documenting a Django website:</p> <ol> <li> <p>Project Overview:</p> <ul> <li>Provide a high-level overview of the project's purpose and goals.</li> <li>Include information about the target audience and any specific requirements.</li> </ul> </li> <li> <p>Installation Instructions:</p> <ul> <li>Clearly outline the steps to set up the development environment.</li> <li>Include dependencies, virtual environment creation, and database setup instructions.</li> </ul> </li> <li> <p>Configuration Settings:</p> <ul> <li>Document key configuration settings in settings.py.</li> <li>Include explanations for each setting and any default values.</li> </ul> </li> <li> <p>Database Schema:</p> <ul> <li>Document the database schema, including models and relationships.</li> <li>Use tools like django-extensions for generating visual representations of the models.</li> </ul> </li> <li> <p>URL Patterns:</p> <ul> <li>Provide an overview of the URL patterns used in the project.</li> <li>Include information on how URLs map to views and templates.</li> </ul> </li> <li> <p>Views and Templates:</p> <ul> <li>Document the purpose of each view and template.</li> <li>Include information about the data passed to templates.</li> </ul> </li> <li> <p>Static Files and Media:</p> <ul> <li>Document the organization of static files and media assets.</li> <li>Explain how to handle user uploads and serve static files in development and production.</li> </ul> </li> <li> <p>Middleware and Hooks:</p> <ul> <li>Document any custom middleware or request/response processing hooks.</li> <li>Explain their purpose and how they fit into the request/response cycle.</li> </ul> </li> <li> <p>Authentication and Authorization:</p> <ul> <li>Document how user authentication and authorization are handled.</li> <li>Include information about the use of Django's built-in authentication system.</li> </ul> </li> <li> <p>Third-Party Packages:</p> <ul> <li>List and document any third-party packages used in the project.</li> <li>Include versions and reasons for choosing specific packages.</li> </ul> </li> <li> <p>API Documentation:</p> <ul> <li>If the website includes APIs, generate and maintain API documentation.</li> <li>Include details about endpoints, request/response formats, and authentication.</li> </ul> </li> <li> <p>Background Tasks:</p> <ul> <li>Document any background tasks or periodic tasks using Celery or similar.</li> <li>Explain the purpose and how they are configured.</li> </ul> </li> <li> <p>Testing:</p> <ul> <li>Provide guidelines on how to run tests.</li> <li>Include information on writing tests, testing strategies, and code coverage.</li> </ul> </li> <li> <p>Deployment Instructions:</p> <ul> <li>Document the deployment process for production.</li> <li>Include server requirements, deployment scripts, and configurations.</li> </ul> </li> <li> <p>Monitoring and Logging:</p> <ul> <li>Describe how logging is configured.</li> <li>Document any monitoring tools or practices in place.</li> </ul> </li> <li> <p>Contributing Guidelines:</p> <ul> <li>Provide guidelines for contributors, including coding standards and how to submit pull requests.</li> <li>Explain the development workflow and branch conventions.</li> </ul> </li> <li> <p>Update Documentation Regularly:</p> <ul> <li>Keep the documentation up to date as the project evolves.</li> <li>Encourage contributors to update documentation along with code changes.</li> </ul> </li> <li> <p>Security Considerations:</p> <ul> <li>Document any security-related practices or considerations.</li> <li>Include information on handling sensitive data and potential vulnerabilities.</li> </ul> </li> <li> <p>License Information:</p> <ul> <li>Clearly specify the project's license in the documentation.</li> <li>Include information on how the project can be used and distributed.</li> </ul> </li> <li> <p>Continuous Integration (CI) Configuration:</p> <ul> <li>Document the CI setup and configuration.</li> <li>Include instructions on how to run tests and deploy using CI/CD.</li> </ul> </li> </ol> <p>By following these best practices, you'll create comprehensive documentation that aids in project understanding, onboarding new team members, and ensuring the maintainability and sustainability of the Django website over time.</p>"},{"location":"misc/commit_message_examples/","title":"Commit message examples","text":"<p>* Commit message conventions can be found here</p> generic linting commit<pre><code>style: Apply PEP 8 and other linting standards for improved code readability and consistency.\n</code></pre> update dependencies with pre-commit hooks<pre><code>chore: Update poetry.lock and requirements.txt using poetry-lock and poetry-export pre-commit hooks.\n</code></pre> clean up<pre><code>chore: Remove print statements and debugging artifacts for cleaner code.\n</code></pre> Update Change Log<pre><code>chore: Update changelog to reflect recent changes and improvements.\n</code></pre> PR_DRAFT<pre><code>chore: Keep PR_DRAFT.md updated with latest updates\n</code></pre>"},{"location":"misc/create_django_app/","title":"Create Django App in Subdirectory","text":""},{"location":"misc/create_django_app/#step-1-create-the-app","title":"Step 1: Create the App","text":"<p>Use the startapp command without the project directory prefix: <pre><code>poetry run python manage.py startapp newapp\n</code></pre> This command creates a new Django app in your project root directory.</p>"},{"location":"misc/create_django_app/#step-2-move-the-app","title":"Step 2: Move the App","text":"<p>Move the newly created app into your desired subdirectory (project/apps/). <pre><code>mv showcase project/apps/\n</code></pre></p>"},{"location":"misc/create_django_app/#step-3-update-installed_apps","title":"Step 3: Update INSTALLED_APPS","text":"<p>In common.py of the settings module, you'll need to add the app using its new path. Since Python uses dots to navigate through modules, you should use the full Python path to your app: common.py<pre><code>INSTALLED_APPS = [\n    ...\n    \"project.apps.showcase\",\n    ...\n]\n</code></pre></p>"},{"location":"misc/create_django_app/#step-4-verify-the-app-structure","title":"Step 4: Verify the App Structure","text":"<p>Ensure that your app directory structure looks like this: <pre><code>project/\n    apps/\n        newapp/\n            migrations/\n            __init__.py\n            admin.py\n            apps.py\n            models.py\n            views.py\n</code></pre></p>"},{"location":"misc/create_django_app/#step-5-adjust-the-apps-appspy","title":"Step 5: Adjust the App's Apps.py","text":"<p>In project/apps/newapp/apps.py, make sure the name attribute of the app's configuration class reflects the new path: apps.py<pre><code>from django.apps import AppConfig\n\nclass NewappConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"project.apps.newapp\"\n</code></pre></p>"},{"location":"misc/create_django_app/#step-6-add-urls-to-project-if-necessary","title":"Step 6: Add URLs to project if necessary","text":"<p>Add include to root url.py file at project.core.urls urls.py<pre><code>path(\"\", include(\"project.apps.newapp.urls\")),\n</code></pre> Create new urls.py in the new app.  Create urls.py in project.apps.newapp urls.py<pre><code>from django.urls import path\nfrom .views import ViewName\n\napp_name = \"appname\"\n\nurlpatterns = [\n    path(\"path/\", ViewName.as_view(), name=\"pathname\"),\n]\n</code></pre></p> <p>By following these steps, you create a Django app in a nested directory structure, which can help organize larger projects with multiple apps. Remember to use the new path (project.apps.showcase) when referring to the app in your Django project, such as in INSTALLED_APPS and when using management commands like makemigrations and migrate.</p>"},{"location":"misc/deep_dive_streaks/","title":"Deep Dive: Streaks","text":""},{"location":"misc/deep_dive_streaks/#streak-scenarios","title":"Streak Scenario's","text":"<p>+  = New Ride | = Existing Ride \u25b3 = Streak  </p>"},{"location":"misc/deep_dive_streaks/#isolated-single-ride","title":"+   (Isolated Single Ride)","text":"<p>Description: No streak exists. The new ride is a single isolated ride with no other rides the day before or after. Action: No streak is created. The ride remains a single, standalone activity.</p>"},{"location":"misc/deep_dive_streaks/#new-two-ride-streak","title":"|+ (New Two-Ride Streak)","text":"<p>Description: The new ride directly follows an existing single ride (X), forming a two-ride streak. Action: Create a new streak combining the single ride and the new ride.</p>"},{"location":"misc/deep_dive_streaks/#out-of-order-two-ride-streak-creation","title":"+ | (Out-of-Order Two-Ride Streak Creation)","text":"<p>Description: The new ride is the day before an existing single ride, forming a two-ride streak. Action: Create a new streak combining the new ride and the existing single ride.</p>"},{"location":"misc/deep_dive_streaks/#three-ride-streak-creation","title":"| + | (Three-Ride Streak Creation)","text":"<p>Description: The new ride bridges two existing single rides, forming a streak of three rides. Action: Create a new streak combining all three rides.</p>"},{"location":"misc/deep_dive_streaks/#extend-an-existing-streak","title":"\u25b3 + (Extend an Existing Streak)","text":"<p>Description: The new ride directly follows the last ride of an existing streak, extending the streak. Action: Update the streak\u2019s end date and length to include the new ride.</p>"},{"location":"misc/deep_dive_streaks/#pad-an-existing-streak","title":"+ \u25b3 (Pad an Existing Streak)","text":"<p>Description: The new ride is added before the start of an existing streak, extending the streak backward. Action: Update the streak\u2019s start date and length to include the new ride.</p>"},{"location":"misc/deep_dive_streaks/#merge-two-streaks","title":"\u25b3 + \u25b3 (Merge Two Streaks)","text":"<p>Description: The new ride falls between two existing streaks, bridging them into a single streak. Action: Merge the two streaks and the new ride into one continuous streak.</p>"},{"location":"misc/django_error_logs_production/","title":"Django Error Logs - In Production Settings","text":"<p>Logging django error messages is configured in environment specific settings file.</p> env_production.py<pre><code># UPDATE THE LOGGING CONFIGURATION FOR PRODUCTION\n# Extend the existing LOGGING configuration\nLOGGING[\"handlers\"][\"file\"] = {\n    \"level\": \"WARNING\",\n    \"class\": \"logging.FileHandler\",\n    \"filename\": os.path.join(BASE_DIR, \"logs\", \"django_errors.log\"),\n    \"formatter\": \"standard\",\n}\n</code></pre> <p>Logs can be found at /home/rocket/beats/project/logs/django_errors.log <pre><code>sudo tail -f /home/rocket/beats/project/logs/django_errors.log\n</code></pre></p>"},{"location":"misc/django_hijack/","title":"Django-Hijack in Our Project","text":""},{"location":"misc/django_hijack/#introduction","title":"Introduction","text":"<p>Django-Hijack is a powerful Django application that allows superusers to temporarily impersonate other users in the system. This functionality is invaluable for debugging, user support, and testing user-specific scenarios without needing to know or change the user's password.</p> <p>With Django-Hijack, administrators can experience the application exactly as a specific user would, making it easier to reproduce and resolve issues, verify permissions, or test new features from different user perspectives.</p>"},{"location":"misc/django_hijack/#how-its-used-in-our-project","title":"How It's Used in Our Project","text":"<p>In our project, Django-Hijack is implemented with default configurations to provide a balance of functionality and security. Here's how it works:</p>"},{"location":"misc/django_hijack/#accessing-hijack-functionality","title":"Accessing Hijack Functionality","text":"<p>1 Admin Interface:</p> <ul> <li>Navigate to the User admin page.</li> <li>Each user row will have a \"Hijack\" button.</li> <li>Click this button to impersonate the selected user.</li> </ul> <p>2 Direct URL:</p> <ul> <li>A superuser should also be able to hijack a user directly by using a url. Review the documentation for more info: Django-Hijack - ReadTheDocs</li> </ul>"},{"location":"misc/django_hijack/#using-hijack-mode","title":"Using Hijack Mode","text":"<p>Once you've activated hijack mode:</p> <ol> <li>You'll see a popup message indicating you're working on behalf of another user.    The message will say: \"You are currently working on behalf of [username].\"</li> <li>This popup provides two options:</li> <li>\"Hide warning\": Dismisses the popup temporarily.</li> <li>\"Stop impersonating\": Ends the hijack session.</li> <li>The popup will reappear every time you refresh the page while in hijack mode.</li> <li>All actions you perform will be as the hijacked user.</li> <li>You can navigate the site, make changes, and interact with features as that user.</li> </ol>"},{"location":"misc/django_hijack/#exiting-hijack-mode","title":"Exiting Hijack Mode","text":"<p>To return to your superuser account:</p> <ol> <li>Click the \"Stop impersonating\" option in the popup message.</li> <li>You should also be able to stop impersonating a user directly by using a url. Review the documentation for more info: Django-Hijack - ReadTheDocs</li> </ol>"},{"location":"misc/django_hijack/#security-measures","title":"Security Measures","text":"<ul> <li>Only superusers have access to the hijack functionality.</li> <li>All hijack actions are logged for auditing purposes.</li> <li>Django's built-in security features protect the hijack functionality.</li> <li>The persistent popup ensures you're always aware when you're in hijack mode.</li> </ul>"},{"location":"misc/django_hijack/#best-practices","title":"Best Practices","text":"<ol> <li>Always use hijack responsibly and only for legitimate administrative purposes.</li> <li>Pay attention to the popup message to ensure you're aware of when you're in hijack mode.</li> <li>Exit hijack mode immediately after completing your task.</li> <li>Be cautious about making changes while in hijack mode, as they will affect the impersonated user's account.</li> <li>Regularly review hijack logs to ensure the feature is not being misused.</li> </ol>"},{"location":"misc/django_hijack/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues with the hijack functionality, please contact the development team immediately. Common issues might include:</p> <ul> <li>Unable to access hijack features (check your permissions)</li> <li>Hijack mode not releasing properly (try clearing your browser cache)</li> <li>Popup not appearing (check your browser's popup settings)</li> <li>Unexpected behavior while in hijack mode (verify if it's user-specific or a general issue)</li> </ul> <p>Remember, with great power comes great responsibility. Use the hijack feature wisely and always respect user privacy and data security.</p>"},{"location":"misc/domain_hosting/","title":"Domain and Hosting Configuration","text":""},{"location":"misc/domain_hosting/#overview","title":"Overview","text":"<p>This document outlines the configuration for the domain and hosting setup where the domain is registered at Hover.com, the website is hosted at DigitalOcean, and the DNS management is handled through DigitalOcean.</p>"},{"location":"misc/domain_hosting/#domain-registration","title":"Domain Registration","text":"<p>Registrar: Hover.com Domain: cyclingbeats.com The domain cyclingbeats.com is registered with Hover.com. Hover.com provides the domain registration service but does not manage the DNS or hosting for this domain.</p>"},{"location":"misc/domain_hosting/#hosting-provider","title":"Hosting Provider","text":"<p>Hosting Provider: DigitalOcean Hosting Details: The website is hosted on a Droplet (virtual server) provided by DigitalOcean. DigitalOcean is responsible for hosting the website. The server infrastructure, including the Droplet where the website is deployed, is managed through DigitalOcean's control panel.</p>"},{"location":"misc/domain_hosting/#dns-management","title":"DNS Management","text":"<p>DNS Provider: DigitalOcean Name Servers: The DNS for example.com is managed through DigitalOcean. The following name servers are configured at Hover.com to point to DigitalOcean's DNS:  </p> <ul> <li>ns1.digitalocean.com  </li> <li>ns2.digitalocean.com  </li> <li>ns3.digitalocean.com  </li> </ul>"},{"location":"misc/examples/","title":"Examples of how to use mkdocs (Code, Icons/Emojs, Images)","text":""},{"location":"misc/examples/#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"misc/examples/#codeblocks","title":"Codeblocks","text":"<p>To create inline code, use single backticks (`) around the code</p> <p>Some <code>code</code> goes here.</p>"},{"location":"misc/examples/#plain-codeblock","title":"Plain codeblock","text":"<p>To create a code block in Markdown, you can use three backticks (```) before and after the code. Optionally, you can specify the language for syntax highlighting.</p> <pre><code>Some code here\ndef myfunction()\n// some comment\n</code></pre>"},{"location":"misc/examples/#code-for-a-specific-language","title":"Code for a specific language","text":"<p>Optionally, you can specify the language for syntax highlighting.  You can user the three backticks followed by the language ie (``` python)</p> <p>The following languages are supported (python, py, javascript, java, c, cpp, csharp, html, css, ruby, php, bash, json, yaml, markdown, sql, r, go, swift, kotlin, perl)</p> <p>(``` py)</p> <pre><code>import tensorflow as tf\ndef whatever()\n</code></pre>"},{"location":"misc/examples/#with-a-title","title":"With a title","text":"<p>(``` py title=\"bubble_sort.py\")</p> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"misc/examples/#with-line-numbers","title":"With line numbers","text":"<p>(``` py linenums=\"1\")</p> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"misc/examples/#highlighting-lines","title":"Highlighting lines","text":"<p>(``` py hl_lines=\"2 3\")</p> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"misc/examples/#icons-and-emojs","title":"Icons and Emojs","text":""},{"location":"misc/examples/#emojs-list","title":"Emojs: list","text":""},{"location":"misc/examples/#fontawesome-icons-list","title":"FontAwesome Icons list","text":""},{"location":"misc/examples/#octicons-list","title":"Octicons list","text":""},{"location":"misc/examples/#simple-icons-list","title":"Simple Icons list","text":""},{"location":"misc/examples/#material-icons-list","title":"Material Icons list","text":""},{"location":"misc/examples/#images","title":"Images","text":"<p> <pre><code>![Beats Documentation](../assets/icons/beats_docs.jpg){: width=\"25%\"}  \n</code></pre> </p> <pre><code>![Jenzen JoyRider](../assets/JenZen.jpg){: width=\"25%\"}  \n</code></pre> <p>*When referencing images in your MkDocs project, be mindful of the directory level of your Markdown file relative to the image directory. In some cases, you may need to navigate up one level to access the image folder, for example, <code>![Alt text](../assets/image.jpg)</code>. In other situations, if your Markdown file is at the same level as the assets folder, you can reference the image directly, like this: <code>![Alt text](assets/image.jpg)</code>.</p>"},{"location":"misc/import_file/","title":"Details on the Process Used to Import Files","text":"<p>.fit and .gpx files are supported </p>"},{"location":"misc/import_file/#big-picture-steps","title":"Big Picture Steps","text":"<ol> <li>Select File</li> <li>Using the file name pre-check that the file appears to be a valid file type (.fit or .gpx)  </li> <li>Process Input File &amp; return Form obj<ul> <li>Open file</li> <li>Determine if file is .fit or .gpx</li> <li>Create <code>file_data</code> dict by calling ???fit -- or -- _get_data_from_gpx()</li> <li>Stash original data in form of <code>file_data</code> dict in <code>StashJsonData</code> model</li> <li>Create <code>pre_prop_form_data</code> dict with data from <code>file_data</code> dict</li> <li>Create <code>RideFormFull</code> obj with data from the <code>pre_prop_form_data</code> dict</li> <li>Return RideFormFull obj</li> </ul> </li> <li>Display Pre-populated form for user to review, edit, and submit</li> <li>Process form data and save data to Activity Model<ul> <li>If form.is_valid() get form.cleaned_data</li> <li>Create and Save an Activity instance with:<ul> <li>core_data(ride_name, distance, duration, elevation, calories)</li> <li>summary_data(speed, hr, cadence, power, etc.)</li> </ul> </li> </ul> </li> <li>Retrieve &amp; Process data from StashJsonData and save RideDetail Model<ul> <li>Retrieve data from the StashJsonData model</li> <li>Process data into a standard format used for mapping_data</li> <li>Create and Save an RideDetail instance with:<ul> <li>mapping_data</li> <li>original_data</li> </ul> </li> </ul> </li> <li>check_for_kudos()</li> <li>calculate_beats</li> <li>Redirecto to feed</li> </ol>"},{"location":"misc/import_file/#data-notes","title":"Data Notes","text":"<ul> <li>file_data dictionary contains raw data from input file and its content and format varies depending on the input files type and makeup.</li> <li>pre_prop_form_data dictionary contains data that has be manipulated and should be the same regardless of the input files type or makeup.</li> <li>original_data field in RideDetail model contains a JSON object of the original data from the input file.  It will differ based on type and makeup.</li> <li>mapping_data field in RideDetail model contains a JSON object that is specif built for this project and contains multiple waypoints with data such as long, lat, power, speed, cadence, altitude, hr, timestamp, etc.</li> </ul>"},{"location":"misc/import_file/#steps-involved","title":"Steps Involved","text":"<ol> <li> <p>Select File</p> <p>Display template for user to select file to be imported</p> rides/urls.py<pre><code>path(\"rides/select_file/\", ImportFromFileView.as_view(), name=\"select_file\"),\n</code></pre> <p>Calls rides.views.ImportFromFileView</p> </li> <li> <p>Validate File Name</p> <p>HTMX function determines if the filename is valid.  Valid filenames end in either .fit or .gpx.  If name is valid the valid message is displayed and submit button is enabled.  If name is not valid a warning message is displayed and submit button remains disabled.</p> rides/urls.py<pre><code>path(\"rides/validate_file_name/\", validate_file_name, name=\"validate_file_name\"),\n</code></pre> </li> <li> <p>Process File - Step 1</p> <p>Calls rides.htmx.process_file function.  This is step1 in the file import process.  This function will process the file and return a form pre-populated with the data from the file.  </p> <p>The output of this function returns the HTML &amp; Form data to pre populate the form that gets submitting in the Step 2</p> rides/urls.py<pre><code>path(\"rides/process_file/\", process_file, name=\"process_file\"),\n</code></pre> </li> <li> <p>Determine File type</p> <p>Calls rides.htmx._get_file_type() to determine file type (.fit or .gpx)</p> rides.htmx.process_file<pre><code>file_type = _get_file_type(uploaded_file)\n</code></pre> </li> <li> <p>Process file and build Form data</p> rides.htmx._process_file<pre><code>form = _process_file(uploaded_file, file_type, request)\n</code></pre> </li> <li> <p>Import File and Return a Dictionary object</p> <p>A file_data object is created by calling a file type specific import function</p> rides.htmx.<pre><code>if file_type == \"FIT\":\n    file_data = import_fit_file(file_path)\nelif file_type == \"GPX\":\n    file_data = import_gpx_file(file_path)\n</code></pre> </li> <li> <p>Create Form Obj with pre populated data from input file</p> </li> </ol>"},{"location":"misc/makefile/","title":"Makefile Documentation","text":""},{"location":"misc/makefile/#introduction-to-makefiles","title":"Introduction to Makefiles","text":"<p>Makefiles are used to automate and simplify complex build processes and task execution in software projects. They define a set of rules and dependencies that allow developers to run common tasks with simple commands.</p> <p>In our project, we use Makefiles to streamline various development tasks, including running tests, linting code, managing the Django application, and handling Poetry dependencies.</p>"},{"location":"misc/makefile/#makefile-organization","title":"Makefile Organization","text":"<p>Our project's Makefiles are organized as follows:</p> <ol> <li><code>Makefile</code>: The main Makefile that includes other specific Makefiles.</li> <li><code>makefiles/django.mk</code>: Contains Django-related commands.</li> <li><code>makefiles/linting.mk</code>: Includes linting and code formatting commands.</li> <li><code>makefiles/testing.mk</code>: Defines various testing commands.</li> <li><code>makefiles/poetry.mk</code>: Manages Poetry-related tasks.</li> <li><code>makefiles/misc.mk</code>: Contains miscellaneous utility commands.</li> </ol> <p>This modular structure allows for better organization and easier maintenance of our build processes.</p>"},{"location":"misc/makefile/#available-targets","title":"Available Targets","text":"<p>Here's a list of the main targets (commands) available in our Makefiles:</p>"},{"location":"misc/makefile/#main-commands","title":"Main Commands","text":"<ul> <li><code>help</code>: List all available commands   Usage: <code>make help</code></li> </ul>"},{"location":"misc/makefile/#testing-commands","title":"Testing Commands","text":"<ul> <li> <p><code>test</code>: Run all tests   Usage: <code>make test [v=0|1|2|3]</code>   Example: <code>make test v=2</code></p> </li> <li> <p><code>tests</code>: Alias for <code>test</code>   Usage: <code>make tests [v=0|1|2|3]</code></p> </li> <li> <p><code>test-account</code>: Run tests for the account app   Usage: <code>make test-account [v=0|1|2|3] [path=&lt;test_path&gt;]</code>   Example: <code>make test-account v=2 path=\"test_views.py::TestAccountView\"</code> </p> </li> <li> <p><code>test-activities</code>: Run tests for the activities app   Usage: <code>make test-activities [v=0|1|2|3] [path=&lt;test_path&gt;]</code> </p> </li> <li> <p><code>test-common</code>: Run tests for the common app   Usage: <code>make test-common [v=0|1|2|3] [path=&lt;test_path&gt;]</code> </p> </li> <li> <p><code>test-community</code>: Run tests for the community app   Usage: <code>make test-community [v=0|1|2|3] [path=&lt;test_path&gt;]</code> </p> </li> <li> <p><code>test-core</code>: Run tests for the core app   Usage: <code>make test-core [v=0|1|2|3]</code> </p> </li> <li> <p><code>test-first</code>: Run special tests in '_first' folder   Usage: <code>make test-first [v=0|1|2|3]</code> </p> </li> <li> <p><code>test-dashboard</code>: Run tests for the dashboard app   Usage: <code>make test-dashboard [v=0|1|2|3] [path=&lt;test_path&gt;]</code> </p> </li> <li> <p><code>test-feed</code>: Run tests for the feed app   Usage: <code>make test-feed [v=0|1|2|3] [path=&lt;test_path&gt;]</code> </p> </li> <li> <p><code>test-kudos</code>: Run tests for the kudos app   Usage: <code>make test-kudos [v=0|1|2|3] [path=&lt;test_path&gt;]</code> </p> </li> <li> <p><code>test-pages</code>: Run tests for the pages app   Usage: <code>make test-pages [v=0|1|2|3] [path=&lt;test_path&gt;]</code> </p> </li> <li> <p><code>test-profile</code>: Run tests for the profile app   Usage: <code>make test-profile [v=0|1|2|3] [path=&lt;test_path&gt;]</code> </p> </li> <li> <p><code>test-rides</code>: Run tests for the rides app   Usage: <code>make test-rides [v=0|1|2|3] [path=&lt;test_path&gt;]</code> </p> </li> <li> <p><code>test-showcase</code>: Run tests for the showcase app   Usage: <code>make test-showcase [v=0|1|2|3] [path=&lt;test_path&gt;]</code> </p> </li> <li> <p><code>testcase</code>: Run tests in the testcases folder   Usage: <code>make testcase [v=0|1|2|3]</code> </p> </li> <li> <p><code>test-coverage</code>: Run tests with coverage and generate report   Usage: <code>make test-coverage</code></p> </li> </ul>"},{"location":"misc/makefile/#linting-and-formatting-commands","title":"Linting and Formatting Commands","text":"<ul> <li> <p><code>install-pre-commit</code>: Install pre-commit hooks   Usage: <code>make install-pre-commit</code></p> </li> <li> <p><code>update</code>: Update environment, run migrations, and install pre-commit hooks   Usage: <code>make update</code> </p> </li> <li> <p><code>lint</code>: Run quick linting with isort, ruff, and black   Usage: <code>make lint</code></p> <p>Note: This command can be run frequently, as it only runs linting tools that will execute quickly to ensure code quality without slowing down your workflow.</p> </li> <li> <p><code>pre-commit</code>: Run pre-commit checks on all files   Usage: <code>make pre-commit</code></p> <p>Note: This command should be run before making major commits, completing branches, or submitting a pull request. It ensures all linting tools are executed and updates poetry.lock and requirements.txt files for consistency.</p> </li> <li> <p><code>black</code>: Run black to format code   Usage: <code>make black</code> </p> </li> <li> <p><code>isort</code>: Run isort to sort imports   Usage: <code>make isort</code> </p> </li> <li> <p><code>ruff</code>: Run ruff to enforce Python style and linting   Usage: <code>make ruff</code> </p> </li> <li> <p><code>ruff-fix</code>: Run ruff with fix option to automatically correct issues   Usage: <code>make ruff-fix</code> </p> </li> </ul>"},{"location":"misc/makefile/#django-commands","title":"Django Commands","text":"<ul> <li> <p><code>run</code>: Run the Django development server   Usage: <code>make run [v=0|1|2|3]</code> </p> </li> <li> <p><code>superuser</code>: Create a Django superuser   Usage: <code>make superuser</code> </p> </li> <li> <p><code>migrations</code>: Create new Django migrations   Usage: <code>make migrations</code> </p> </li> <li> <p><code>migrate</code>: Apply Django migrations   Usage: <code>make migrate</code> </p> </li> <li> <p><code>collectstatic</code>: Collect static files for Django   Usage: <code>make collectstatic</code> </p> </li> <li> <p><code>dj-shell</code>: Start a Django shell   Usage: <code>make dj-shell</code> </p> </li> <li> <p><code>manage</code>: Run a Django management command   Usage: <code>make manage [cmd=&lt;command&gt;] [args=&lt;arguments&gt;]</code>   Example: <code>make manage cmd=commandname args=arg1,arg2</code> </p> </li> </ul>"},{"location":"misc/makefile/#poetry-commands","title":"Poetry Commands","text":"<ul> <li> <p><code>install</code>: Install dependencies using Poetry   Usage: <code>make install</code> </p> </li> <li> <p><code>shell</code>: Start a Poetry shell   Usage: <code>make shell</code> </p> </li> </ul>"},{"location":"misc/makefile/#miscellaneous-commands","title":"Miscellaneous Commands","text":"<ul> <li> <p><code>check-filenames</code>: Check and convert filenames to ride names   Usage: <code>make check-filenames</code> </p> </li> <li> <p><code>test-email</code>: Send a test email   Usage: <code>make test-email type=&lt;email_type&gt;</code>   Example: <code>make test-email type=welcome</code> </p> </li> </ul>"},{"location":"misc/makefile/#running-makefile-commands","title":"Running Makefile Commands","text":"<p>To run a Makefile command, open your terminal, navigate to the project root directory, and use the following syntax:</p> <pre><code>make &lt;target&gt;\n</code></pre> <p>For example:</p> <ul> <li> <p>To run the Django development server:  </p> <pre><code>make run\n</code></pre> </li> <li> <p>To run all tests:</p> <pre><code>make test\n</code></pre> </li> <li> <p>To apply Django migrations:</p> <pre><code>make migrate\n</code></pre> </li> </ul> <p>Some commands accept additional parameters. For example:</p> <ul> <li> <p>To run tests with a specific verbosity level:</p> <pre><code>make test v=2\n</code></pre> </li> <li> <p>To run a specific Django management command:</p> <pre><code>make manage cmd=createsuperuser\n</code></pre> </li> <li> <p>To run a specific Test at a specific verbosity level:</p> <pre><code>make test-community path=\"test_views.py::TestCommunityView\" v=2\n</code></pre> </li> </ul> <p>You can always use the <code>help</code> target to see a list of available commands:</p> <pre><code>make help\n</code></pre> <p>This will display a list of targets with brief descriptions, helping you find the right command for your task.</p>"},{"location":"misc/management_commands/","title":"Django Management Commands","text":""},{"location":"misc/management_commands/#overview","title":"Overview","text":"<p>This document outlines the available Django management commands in the project.</p>"},{"location":"misc/management_commands/#commands","title":"Commands","text":""},{"location":"misc/management_commands/#check_levels","title":"check_levels","text":"<p>Django management command to check if the Levels Model is populated.\"\"\"</p>"},{"location":"misc/management_commands/#delete_stash_json_data","title":"delete_stash_json_data","text":"<p>A Django management command to clear all entries from the StashJsonData model.</p> <p>This command deletes all data from the StashJsonData table, which temporarily stores JSON data for user review before import or discard. It ensures cleanup of leftover data, which may remain due to interruptions in the process. The command will also report the number of entries deleted and is included with commands executed alongside migrate to maintain database consistency.</p>"},{"location":"misc/management_commands/#migrate_kudo_name_data","title":"migrate_kudo_name_data","text":"<p>A Django management command to update the name and display_name fields in the Kudo model, ensuring consistent naming conventions and proper display values.</p>"},{"location":"misc/management_commands/#description","title":"Description","text":"<p>This command processes a predefined list of kudo name mappings to update existing records in the database. Each mapping consists of: - Current name: The existing value in the database - New name: The standardized internal name (typically snake_case) - Display name: The user-friendly name for UI display</p> <p>The command supports a dry-run mode for testing changes before applying them to the database.</p>"},{"location":"misc/management_commands/#basic-execution","title":"Basic Execution","text":"<p>To run the migration and update the database:</p> <pre><code>poetry run python manage.py migrate_kudo_names\n</code></pre>"},{"location":"misc/management_commands/#dry-run","title":"Dry Run","text":"<p>To preview changes without modifying the database:</p> <pre><code>poetry run python manage.py migrate_kudo_names --dry-run\n</code></pre>"},{"location":"misc/management_commands/#options","title":"Options","text":"<ul> <li><code>--dry-run</code>: Execute the command without making changes to the database. Shows what changes would be made.</li> </ul>"},{"location":"misc/management_commands/#notes","title":"Notes","text":"<ul> <li>Always run with <code>--dry-run</code> first to verify the expected changes</li> <li>The command will only update records where the current name matches exactly</li> <li>Updates are performed in a single transaction per mapping</li> <li>Command progress is logged to stdout</li> </ul>"},{"location":"misc/management_commands/#send_test_email","title":"send_test_email","text":"<p>A Django management command to send test emails for various django-allauth email templates.</p> <p>This command allows developers to test and verify email templates such as account_already_exists, email_confirmation, password_reset, and more. Each email type has a shorthand for quick usage. It is useful during development to ensure templates are functioning and formatted correctly.</p>"},{"location":"misc/management_commands/#supported-email-types","title":"Supported Email Types","text":"<ul> <li>account_already_exists (shorthand: exists)</li> <li>email_confirmation (shorthand: confirm)</li> <li>email_confirmation_signup (shorthand: signup)</li> <li>password_reset (shorthand: reset)</li> <li>unknown_account (shorthand: unknown)</li> </ul>"},{"location":"misc/management_commands/#usage","title":"Usage","text":"<pre><code>poetry run python manage.py send_test_email &lt;email_type&gt;\n</code></pre>"},{"location":"misc/management_commands/#examples","title":"Examples","text":"<pre><code>poetry run python manage.py send_test_email account_already_exists\npoetry run python manage.py send_test_email confirm\n</code></pre>"},{"location":"misc/management_commands/#sync_filename_data","title":"sync_filename_data","text":"<p>A Django management command to sync the FileRideNameData model with data from a YAML file.</p> <p>This command reads a YAML file (file_ride_name_data.yaml) to update the FileRideNameData model. It adds new entries from the file that are missing in the database and removes entries from the database not found in the file. Useful for keeping the model's data in sync with the YAML configuration.</p>"},{"location":"misc/management_commands/#key-features","title":"Key Features","text":"<ul> <li>Add New Entries: Inserts records from the YAML file that are missing in the database.</li> <li>Remove Stale Entries: Deletes records in the database that are no longer present in the YAML file.</li> </ul>"},{"location":"misc/management_commands/#usage_1","title":"Usage","text":"<p>Run the command using the Django management CLI:</p> <pre><code>poetry run python manage.py sync_filename_data\n</code></pre>"},{"location":"misc/management_commands/#sync_kudos_config","title":"sync_kudos_config","text":"<p>A Django management command that syncs kudos data from a YAML file to the database.</p> <p>This command reads the kudos.yaml file, clears existing kudo entries in the database, and populates the database with the new data from the YAML file. The YAML file is considered the master source of truth for the kudo configurations.</p>"},{"location":"misc/management_commands/#test_convert_filename_to_ridename","title":"test_convert_filename_to_ridename","text":"<p>A utility to test the get_ride_name_from_file_name function by verifying its output against a set of predefined test cases.</p> <p>The script creates a list of test cases, each consisting of a file name and its corresponding expected ride name. For each test case, the function is executed, and the input file name, the output ride name from the function, and the expected ride name are printed to the console. This process ensures that the function behaves as expected and highlights any discrepancies for further debugging.</p>"},{"location":"misc/management_commands/#test_user_creation","title":"test_user_creation","text":"<p>A management command to test the user creation process and inspect the emails generated during registration.</p> <p>This command uses Django's test client to simulate a user registration process and verifies its success. It also checks the emails generated during the process to ensure proper functionality. An optional flag allows for the deletion of the test user after the test is complete, ensuring a clean database.</p>"},{"location":"misc/management_commands/#usage_2","title":"Usage","text":"<p>To create a test user:</p> <pre><code>poetry run python manage.py test_user_creation\n</code></pre> <p>To delete the test user after the test:</p> <pre><code>poetry run python manage.py test_user_creation --delete\n</code></pre>"},{"location":"misc/robots_dot_txt/","title":"Robots.txt","text":""},{"location":"misc/robots_dot_txt/#overview","title":"Overview","text":""},{"location":"misc/robots_dot_txt/#what-is-robotstxt","title":"What is robots.txt?","text":"<p>robots.txt is a standard used by websites to communicate with web crawlers and other web robots. It specifies which parts of the website should not be accessed or scanned by these automated agents. This file is placed at the root of the website and is publicly accessible.  </p>"},{"location":"misc/robots_dot_txt/#purpose-of-robotstxt","title":"Purpose of robots.txt","text":"<ul> <li>Control Web Crawlers: Direct web crawlers on which pages they can or cannot access.</li> <li>Prevent Overloading: Prevent web crawlers from overloading the server by limiting their access.</li> <li>Protect Sensitive Information: Restrict access to parts of the website that contain sensitive information or are not meant for public viewing.</li> </ul>"},{"location":"misc/robots_dot_txt/#using-django-robots-in-this-project","title":"Using django-robots in This Project","text":"<p>django-robots is a Django library that provides a simple way to manage your robots.txt file. It allows you to define rules and URLs directly from the Django admin interface, making it easy to update and maintain.</p>"},{"location":"misc/robots_dot_txt/#creating-rules-and-urls","title":"Creating Rules and URLs","text":"<ol> <li>Access the Django Admin:     Navigate to the Django admin interface (e.g., http://127.0.0.1:8000/admin/).</li> <li>Add a Rule:<ul> <li>Go to the Robots section.</li> <li>Click on Add Rule.</li> <li>Fill in the details:<ul> <li>User-agent: Specify the user-agent (e.g., Googlebot or * for all user agents).</li> <li>Advanced options:<ul> <li>Crawl-delay: Optionally, specify a crawl delay.</li> </ul> </li> </ul> </li> </ul> </li> <li>Add URLs to the Rule:<ul> <li>After creating a rule, you can add URLs to it.</li> <li>Click on Add URL under the rule.</li> <li>Specify the URL pattern (e.g., /private/).</li> </ul> </li> </ol>"},{"location":"misc/robots_dot_txt/#example","title":"Example","text":"<p>Here is an example of a robots.txt file managed by django-robots:</p> robots.txt<pre><code>User-agent: *\nDisallow: /admin/\nDisallow: /private/\n</code></pre>"},{"location":"misc/robots_dot_txt/#verifying-robotstxt","title":"Verifying robots.txt","text":"<p>To verify that your robots.txt file is correctly configured and accessible:</p> <ol> <li> <p>Run the Development Server:</p> <pre><code>make run\n-- or --\npython manage.py runserver\n</code></pre> </li> <li> <p>Access robots.txt:     Open your web browser and navigate to:</p> <pre><code>http://127.0.0.1:8000/robots.txt\n</code></pre> </li> <li> <p>Check the Response:     Ensure that the response contains the rules you defined.</p> </li> </ol>"},{"location":"misc/robots_dot_txt/#unit-testing-robotstxt","title":"Unit Testing robots.txt","text":"<p>To ensure that your robots.txt file is correctly configured you can run the unit test: project.apps.common.test_robots.py</p> <pre><code>make test-common\n</code></pre>"},{"location":"misc/robots_dot_txt/#best-practices","title":"Best Practices","text":"<ul> <li>Do Not Expose Sensitive URLs: Avoid listing sensitive URLs in robots.txt as it is publicly accessible.</li> <li>Use Strong Authentication: Ensure strong authentication mechanisms for sensitive parts of your site.</li> <li>Monitor Access: Regularly monitor access logs for any suspicious activity.</li> </ul> <p>By following these guidelines and using django-robots, you can effectively manage your robots.txt file and control how web crawlers interact with your site.</p>"},{"location":"misc/seo/","title":"SEO Tools","text":""},{"location":"misc/seo/#django-check-seo","title":"Django Check SEO","text":"<p>https://pypi.org/project/django-check-seo/</p> <p>django-seo-checker is a tool designed to help ensure their web applications adhere to SEO best practices by providing automated checks and detailed reports. It verifies the presence and correctness of meta tags, validates sitemaps, detects broken links, and analyzes on-page content for SEO optimization, among other features. By integrating django-seo-checker into a Django project, developers can run SEO audits using management commands, identify and prioritize SEO issues, and maintain continuous compliance with SEO standards, ultimately enhancing the site's visibility and ranking in search engine results.</p> <pre><code>https://example.com/django-check-seo/?page=/example-page/\n  -&gt; will check https://example.com/example-page/\n</code></pre>"},{"location":"misc/seo/#_1","title":"???","text":"<p>Another tool is necessary to actually do something :O</p> <p>django-seo  (hasn't been updated in 14 years) django-meta</p>"},{"location":"misc/sitemaps/","title":"Sitemaps","text":""},{"location":"misc/sitemaps/#overview","title":"Overview","text":"<p>Sitemaps are XML files that list the URLs for a site, along with additional metadata about each URL (such as when it was last updated, how often it changes, and how important it is relative to other URLs on the site). This helps search engines like Google to crawl the site more intelligently.</p> <p>In this project, we use Django's built-in sitemap framework to generate sitemaps for both static and dynamic content.</p>"},{"location":"misc/sitemaps/#staticviewsitemap","title":"StaticViewSitemap","text":"<p>The StaticViewSitemap class is used to include static pages (like home, about, and contact) in the sitemap.</p>"},{"location":"misc/sitemaps/#implementation","title":"Implementation","text":"<p>The StaticViewSitemap class is defined in project/apps/common/sitemaps.py:</p> sitemaps.py<pre><code>from django.contrib.sitemaps import Sitemap\nfrom django.urls import reverse\n\nclass StaticViewSitemap(Sitemap):\n    \"\"\"Static views sitemap\"\"\"\n\n    priority = 0.5\n    changefreq = \"monthly\"\n\n    def items(self):\n        \"\"\"Items to include in the sitemap\"\"\"\n        return [\"pages:home\", \"pages:about\", \"pages:contact\"]\n\n    def location(self, item):\n        \"\"\"Location of the item in the sitemap\"\"\"\n        return reverse(item)\n</code></pre>"},{"location":"misc/sitemaps/#url-configuration","title":"URL Configuration","text":"<p>The sitemap is included in the URL configuration in project/core/urls.py:</p> urls.py<pre><code>from django.contrib.sitemaps.views import sitemap\nfrom project.apps.common.sitemaps import StaticViewSitemap\n\nsitemaps = {\n    \"static\": StaticViewSitemap,\n}\n\nurlpatterns = [\n    path(\"sitemap.xml\", sitemap, {\"sitemaps\": sitemaps}, name=\"sitemap\"),\n    # ... other url patterns ...\n]\n</code></pre>"},{"location":"misc/sitemaps/#creating-additional-sitemap-classes","title":"Creating Additional Sitemap Classes","text":"<p>To create additional sitemap classes for dynamic content, follow these steps:</p> <ol> <li> <p>Define the Sitemap Class: Create a new class in project/apps/common/sitemaps.py or in the relevant app's sitemaps.py file.</p> sitemaps.py<pre><code>from django.contrib.sitemaps import Sitemap\nfrom project.apps.blog.models import Post\n\nclass PostSitemap(Sitemap):\n    changefreq = \"weekly\"\n    priority = 0.6\n\n    def items(self):\n        return Post.objects.filter(status=\"published\")\n\n    def lastmod(self, obj):\n        return obj.updated_at\n</code></pre> </li> <li> <p>Update URL Configuration: Add the new sitemap class to the sitemaps dictionary in project/core/urls.py.</p> urls.py<pre><code>from project.apps.common.sitemaps import StaticViewSitemap, PostSitemap\n\nsitemaps = {\n    \"static\": StaticViewSitemap,\n    \"posts\": PostSitemap,\n}\n\nurlpatterns = [\n    path(\"sitemap.xml\", sitemap, {\"sitemaps\": sitemaps}, name=\"sitemap\"),\n    # ... other url patterns ...\n]\n</code></pre> </li> </ol> <p>To ensure your sitemaps are working correctly, you can create unit tests. Here\u2019s how to test the StaticViewSitemap:</p> <ol> <li> <p>Create Test File: Add a test file test_sitemaps.py in project/tests/apps/common/.</p> test_sitemaps.py<pre><code>    from django.test import TestCase\nfrom django.urls import reverse\nfrom project.apps.common.sitemaps import StaticViewSitemap\n\nclass StaticViewSitemapTests(TestCase):\n    \"\"\"Tests for the StaticViewSitemap\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up the sitemap\"\"\"\n        self.sitemap = StaticViewSitemap()\n\n    def test_static_view_sitemap_items(self):\n        \"\"\"Test the items in the sitemap\"\"\"\n        expected_items = {\"pages:home\", \"pages:about\", \"pages:contact\"}\n        items = set(self.sitemap.items())\n        self.assertTrue(expected_items.issubset(items))\n\n    def test_static_view_sitemap_location(self):\n        \"\"\"Test the location of the items in the sitemap\"\"\"\n        for item in self.sitemap.items():\n            url = self.sitemap.location(item)\n            self.assertTrue(url.startswith(\"/\"))\n            self.assertTrue(reverse(item) == url)\n</code></pre> </li> <li> <p>Run Tests: Use Django\u2019s test runner to execute the tests.  Use project Make file targets to run tests.</p> <pre><code>make test-common\n</code></pre> </li> </ol>"},{"location":"misc/sitemaps/#updating-tests","title":"Updating Tests","text":""},{"location":"misc/sitemaps/#conclusion","title":"Conclusion","text":"<p>Sitemaps are a crucial part of SEO, helping search engines to index your site more effectively. By following the steps outlined above, you can easily manage and extend sitemaps in your Django project.</p>"},{"location":"misc/smtp_info/","title":"SMTP Info","text":""},{"location":"misc/smtp_info/#smtp2go","title":"SMTP2Go","text":"<p>Using SMTP2GO (www.smtp2go.com) as an email delivery service. Use for SMTP Relay  Service &amp; Email Tracking.</p> .env<pre><code># Email Configuration\nEMAIL_HOST=mail.smtp2go.com\nEMAIL_PORT=2525\nEMAIL_HOST_USER=cyclingbeats.com\nEMAIL_HOST_PASSWORD=*****************\nEMAIL_USE_TLS=True\n</code></pre>"},{"location":"misc/smtp_info/#testing-from-python-shell","title":"Testing from python shell","text":"<ul> <li>Open python shell within django environment <pre><code>cd /home/rocket/beats\nsource _env/bin/activate\npython manage.py shell\n</code></pre></li> <li>execute commands from shell <pre><code># import send_mail\nfrom django.core.mail import send_mail\n\n# import settings\nfrom django.conf import settings\n\n# send test email\nsend_mail(\"test_email\", \"This is a test email\", \"admin@cyclingbeats.com\", [\"timpandrews@yahoo.com\"], fail_silently=False,)\n\n# review settings\nprint(\"EMAIL_BACKEND:\", settings.EMAIL_BACKEND)\nprint(\"EMAIL_HOST:\", settings.EMAIL_HOST)\nprint(\"EMAIL_PORT:\", settings.EMAIL_PORT)\nprint(\"EMAIL_USE_TLS:\", settings.EMAIL_USE_TLS)\nprint(\"EMAIL_HOST_USER:\", settings.EMAIL_HOST_USER)\nprint(\"EMAIL_HOST_PASSWORD:\", settings.EMAIL_HOST_PASSWORD)\nprint(\"DEFAULT_FROM_EMAIL:\", settings.DEFAULT_FROM_EMAIL)\n\n# update settings\nsettings.EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nsettings.EMAIL_HOST = 'smtp.example.com'  # Replace with your SMTP host\nsettings.EMAIL_PORT = 587\nsettings.EMAIL_USE_TLS = True\nsettings.EMAIL_HOST_USER = 'your_email@example.com'\nsettings.EMAIL_HOST_PASSWORD = 'your_password'\nsettings.DEFAULT_FROM_EMAIL = 'your_email@example.com'\n</code></pre></li> </ul>"},{"location":"misc/website_analytics/","title":"Website Analytics with Umami","text":"<ul> <li>https://umami.is/</li> <li>https://us.umami.is/dashboard</li> <li>https://umami.is/docs</li> </ul> include/_head.html<pre><code>&lt;!-- Analytics --&gt;\n{% if ENVIRONMENT_NAME == \"Production\" %}\n    &lt;script defer src=\"https://cloud.umami.is/script.js\" data-website-id=\"********************\"&gt;&lt;/script&gt;\n{% endif %}\n</code></pre> <p>*Script is only enabled for production environment</p>"},{"location":"tasks/add_dependencies/","title":"Adding dependencies/packages to the project","text":"<pre><code>poetry add pendulum\n</code></pre> <pre><code>poetry add django-check-seo --group dev\n</code></pre>"},{"location":"tasks/add_kudos/","title":"Adding Kudos to the Application","text":""},{"location":"tasks/add_kudos/#how-to-add-kudos","title":"How to Add Kudos","text":"<p>There are two main ways to add kudos to the application: 1. Simple kudos using a database query in kudos.yaml 2. Complex kudos using a custom function in checks.py  </p>"},{"location":"tasks/add_kudos/#method-1-adding-simple-kudos","title":"Method 1: Adding Simple Kudos","text":"<p>For simple kudos that can be determined using a straightforward database query or condition, you can add an entry directly in the kudos.yaml file. </p>"},{"location":"tasks/add_kudos/#steps","title":"Steps:","text":"<ol> <li>Open the project/config/kudos.yaml file.   </li> <li>Add a new entry under the kudos section with a unique key for your kudo.   </li> <li>Fill in the required fields for the kudo.  </li> </ol>"},{"location":"tasks/add_kudos/#example","title":"Example:","text":"<pre><code>kudos:\n  your_new_kudo_name:\n    include_in_check: true\n    beats: 50\n    code: |\n      if Activity.objects.filter(user=user, activity_type=\"ride\").count() &gt;= 10:\n        achieved = True\n      else:\n        achieved = False\n    kudos_type: badge\n    display_type: user\n    name: Ten Rides Badge\n    icon_family: fa\n    icon_name: fa-bicycle\n    style:\n      size: 3em\n      color: ForestGreen\n</code></pre>"},{"location":"tasks/add_kudos/#required-fields","title":"Required Fields:","text":"<ul> <li>include_in_check: Set to true if this kudo should be checked for each activity.  You can set this to false for kudos that are only awarded under specific conditions (e.g. New User Kudos)</li> <li>beats: The number of beats awarded for this kudo.   </li> <li>code: A Python code snippet that sets the achieved variable to True or False.   </li> <li>kudos_type: Can be \"trophy\", \"badge\", or \"streak\".    </li> <li>display_type: Can be \"user\", \"single\", \"multiple\", or \"streak\".    </li> <li>name: The display name of the kudo.   </li> <li>icon_family: The icon family (e.g., \"fa\" for Font Awesome, \"bi\" for Bootstrap Icons).   </li> <li>icon_name: The specific icon name.   </li> <li>style: A dictionary containing size and color for the icon.   </li> </ul>"},{"location":"tasks/add_kudos/#method-2-adding-complex-kudos","title":"Method 2: Adding Complex Kudos","text":"<p>For more complex kudos that require advanced logic or multiple database queries, you'll need to create a custom function in <code>checks.py</code> and reference it in <code>kudos.yaml</code>.  </p>"},{"location":"tasks/add_kudos/#steps_1","title":"Steps:","text":"<ol> <li>Open the project/apps/kudos/checks.py file.  </li> <li>Define a new function for your kudo check.  </li> <li>Open the project/config/kudos.yaml file.  </li> <li>Add a new entry referencing your custom function.  </li> </ol>"},{"location":"tasks/add_kudos/#examples","title":"Examples:","text":"checks.py<pre><code>def check_complex_kudo(user, activity, config):\n    # Your complex logic here\n    # ...\n    if complex_condition_met:\n        return True, {\"additional_info\": \"Some details\"}\n    else:\n        return False, None\n</code></pre> kudos.yaml<pre><code>kudos:\n  complex_kudo_name:\n    include_in_check: true\n    beats: 75\n    code: \"function:check_complex_kudo\"\n    kudos_type: trophy\n    display_type: single\n    name: Complex Achievement Trophy\n    icon_family: bi\n    icon_name: bi-award\n    style:\n      size: 4em\n      color: Purple\n</code></pre>"},{"location":"tasks/add_kudos/#function-requirements","title":"Function Requirements:","text":"<ul> <li>The function should take three parameters: user, activity, and config.  </li> <li>It should return a tuple: (achieved, details).  <ul> <li>achieved is a boolean indicating if the kudo was earned.   </li> <li>details is either None or a dictionary with additional information.    </li> </ul> </li> </ul>"},{"location":"tasks/add_kudos/#how-it-works","title":"How It Works:","text":"<p>The check_for_kudos function in views.py processes each kudo defined in kudos.yaml: 1. It loads the kudo configuration from kudos.yaml.   2. For each kudo, it checks if include_in_check is True. 3. It then executes the code for the kudo:     - If the code is a Python snippet, it's executed directly.     - If the code starts with \"function:\", it calls the corresponding function in <code>checks.py</code>. 4. If the kudo is achieved, it creates a new <code>Kudo</code> object and associates it with the user and activity. </p>"},{"location":"tasks/add_kudos/#important-files-functions","title":"Important Files / Functions","text":""},{"location":"tasks/add_kudos/#kudosyaml","title":"Kudos.yaml","text":"<ul> <li>kudos.yaml contains the configuration for the kudos system.  It is used to define the kudos that can be awarded to users.</li> <li>kudos.yaml is located @ project/config/kudos.yaml</li> <li>The location for this file is defined in settings.CONFIG_PATH</li> </ul>"},{"location":"tasks/add_kudos/#examples_1","title":"Examples:","text":"Generic Example with explanations<pre><code> kudo_name:\n   include_in_check: true/false\n   code:  provide an if statement or function name to check if the kudo is\n          achieved if an if statement is provided, then the if statement will\n          be evaluated or if a function name is provided, then the function\n          will be called.\n   kudos_type: trophy/badge/streak\n   name: Name of the kudo (as displayed within the app)\n   icon_family: fa/bi (Font Awesome, Bootstrap Icons, or others may be added\n                in the future)\n   icon_name: Name of the icon to be used\n   style:  dictionary containing the style of the icon\n     size: size of the icon\n     color: color of the icon\n</code></pre> <p>Example of kudo with if/then statement<pre><code>metric_century_trophy:\n  include_in_check: true\n  code: |\n    if activity.core_data[\"distance\"] &gt;= 100:\n      achieved = True\n    else:\n      achieved = False\n  kudos_type: trophy\n  name: Metric Century Trophy\n  icon_family: fa\n  icon_name: fa-star\n  style:\n    size: 3em\n    color: MidnightBlue\n</code></pre> Example of kudo with function<pre><code>two_hundred_km_in_a_week_trophy:\n  include_in_check: true\n  code: \"function:check_two_hundred_km_in_a_week\"\n  kudos_type: trophy\n  name: 200 km in a week\n  icon_family: bi\n  icon_name: bi-patch-check-fill\n  style:\n    size: 3em\n    color: Gold\n</code></pre></p>"},{"location":"tasks/add_kudos/#check_for_kudos","title":"check_for_kudos()","text":"<p>The check_for_kudos function is located in the project/apps/kudos/views.py file. This function serves as the main entry point for evaluating and awarding kudos to users based on their activities.</p>"},{"location":"tasks/add_kudos/#purpose","title":"Purpose:","text":"<p>The primary purpose of check_for_kudos is to determine whether a user has earned any kudos for a given activity. It acts as a bridge between the activity data and the kudo definitions, applying the criteria specified in the kudos.yaml configuration file to decide if a kudo should be awarded.</p>"},{"location":"tasks/add_kudos/#functionality","title":"Functionality:","text":"<ul> <li>Reads the kudo configuration from the kudos.yaml file.</li> <li>Iterates through each kudo definition in the configuration.</li> <li>Evaluates whether the given activity meets the criteria for each kudo.</li> <li>Awards kudos to the user when criteria are met.</li> <li>Handles both simple (inline code) and complex (function-based) kudo checks.</li> </ul>"},{"location":"tasks/add_kudos/#how-its-called","title":"How It's Called:","text":"<p>This function is typically called after a new activity is created or updated. It would be invoked in views or background tasks that process user activities.</p> <pre><code># After creating or updating an activity\ncheck_for_kudos(user, activity)\n</code></pre>"},{"location":"tasks/add_kudos/#key-features","title":"Key Features:","text":"<ul> <li>Supports excluding specific kudos from being checked (useful for combined activities).</li> <li>Dynamically imports and executes complex check functions from project.apps.kudos.checks.</li> <li>Logs various stages of the kudo checking process for debugging and monitoring.</li> <li>Handles both inline code and function-based kudo criteria.</li> </ul>"},{"location":"tasks/add_kudos/#parameters","title":"Parameters:","text":"<ul> <li>user: The user for whom kudos are being checked.</li> <li>activity: The activity being evaluated for kudos.</li> <li>excluded_kudos: An optional list of kudo names to exclude from checking.</li> </ul>"},{"location":"tasks/add_kudos/#integration","title":"Integration:","text":"<p>This function integrates closely with: - The kudos.yaml configuration file. - The checks.py module for complex kudo evaluations. - The logging system for tracking the kudo checking process.  </p> <p>By centralizing the kudo checking logic in this function, the application maintains a consistent approach to awarding kudos across different types of activities and achievements.</p>"},{"location":"tasks/add_kudos/#checkspy","title":"checks.py","text":"<p>The checks.py file is located in the project/apps/kudos/ directory. This file contains the logic for evaluating complex kudos that require more sophisticated checks than simple database queries.</p>"},{"location":"tasks/add_kudos/#purpose-and-functionality","title":"Purpose and Functionality:","text":"<ul> <li>Houses functions that determine whether a user has earned specific kudos based on their activities.</li> <li>Each function in this file corresponds to a complex kudo check defined in the kudos.yaml configuration.</li> <li>These functions analyze user activities, streaks, and other relevant data to decide if a kudo should be awarded.</li> </ul>"},{"location":"tasks/add_kudos/#structure-and-design","title":"Structure and Design:","text":"<ul> <li>Contains main check functions for different types of kudos (e.g., streaks, distance milestones).</li> <li>Includes helper functions to support the main checks, handling common tasks like age calculation or streak management.</li> <li>Utilizes Django models, particularly Activity and Kudo, to interact with the database.</li> </ul>"},{"location":"tasks/add_kudos/#integration-with-the-kudos-system","title":"Integration with the Kudos System:","text":"<ul> <li>Functions in this file are called by the check_for_kudos function in views.py.</li> <li>They are referenced in the kudos.yaml file using the function: prefix in the code field of kudo definitions.</li> </ul>"},{"location":"tasks/add_kudos/#function-signature-and-return-values","title":"Function Signature and Return Values:","text":"<ul> <li>Most functions follow a standard signature: def check_function_name(user, activity, config):</li> <li>They typically return a tuple: (achieved, details), where achieved is a boolean and details is a dictionary or None.</li> </ul>"},{"location":"tasks/add_kudos/#key-features_1","title":"Key Features:","text":"<ul> <li>Implements complex logic for kudos that can't be determined by simple database queries.</li> <li>Handles time-based calculations, often using the pendulum library for advanced date and time operations.</li> <li>Includes logging for tracking important events and potential issues.</li> <li>Manages edge cases and ensures data integrity (e.g., preventing duplicate kudos).</li> </ul>"},{"location":"tasks/add_kudos/#extensibility","title":"Extensibility:","text":"<ul> <li>New complex kudo checks can be added to this file, following the established patterns and conventions.</li> <li>Developers can create custom logic for new types of achievements or milestones.</li> <li>By centralizing complex kudo checks in checks.py, the application maintains a clean separation of concerns and allows for easy addition and modification of kudos logic.</li> </ul>"},{"location":"tasks/add_kudos/#get_kudos_config","title":"get_kudos_config()","text":"<p>The <code>get_kudos_config()</code> function is a crucial utility that retrieves the kudos configuration for the project from a YAML file.</p>"},{"location":"tasks/add_kudos/#purpose_1","title":"Purpose","text":"<ul> <li>Loads and returns the kudos configuration from <code>kudos.yaml</code></li> <li>Centralizes configuration access for consistency across the project</li> </ul>"},{"location":"tasks/add_kudos/#location","title":"Location","text":"<ul> <li>File: <code>project/apps/common/utils/config.py</code></li> <li>Module: <code>project.apps.common.utils.config</code></li> </ul>"},{"location":"tasks/add_kudos/#usage","title":"Usage","text":"<ul> <li>Primary caller: <code>check_for_kudos()</code> function in <code>project/apps/kudos/views.py</code></li> <li>Used in kudos-related operations throughout the project</li> </ul>"},{"location":"tasks/add_kudos/#functionality_1","title":"Functionality","text":"<ol> <li>Constructs the path to <code>kudos.yaml</code> using <code>settings.CONFIG_PATH</code></li> <li>Opens and reads the YAML file</li> <li>Loads the YAML content into a Python dictionary</li> <li>Extracts and returns the 'kudos' section as <code>dict_items</code></li> </ol>"},{"location":"tasks/add_kudos/#returns","title":"Returns","text":"<ul> <li><code>dict_items</code>: Key-value pairs of kudos configurations</li> </ul> <p>The <code>get_kudos_config()</code> function ensures that all parts of the project have access to the latest kudos configuration, facilitating consistent kudos checking and awarding processes.</p>"},{"location":"tasks/change_log/","title":"Change Log","text":"change_log.yaml<pre><code>- version: \"0.1.0-alpha\"\n  change_log_date: \"2024-02-08\"\n  description: \"Overview of the entire change_log/version.\"\n  internal: False   \n  live: True        \n  working: False \n  entries:\n  - type: \"New Feature\"\n    title: \"Initial implementation of Change Log\"\n    internal: False \n    description: \"Detailed description of this entry.\"\n  - type: \"Enhancement\"\n    description: \"Made Miscellaneous Formatting Changes\"\n    internal: False\n    description: \"Detailed description of this entry.\"\n</code></pre>"},{"location":"tasks/change_log/#changelog-fields","title":"ChangeLog - Fields","text":"<ul> <li>version (text): Version must be in 'MAJOR.MINOR.PATCH' or 'MAJOR.MINOR.PATCH-PRERELEASE' format.\"</li> <li>change_log_date (text): YYYY-MM-DD</li> <li>description (text): Overview of the entire change_log/version. This is not displayed in the change log and is only used for reference here. </li> <li>internal (boolean): if internal only displayed for superusers</li> <li>live (boolean): if live, display in the change log</li> <li>working (boolean): if working, this is the latest change_log and is not completed and should not be diplayed in the change log</li> <li>entries (list): a list of all Change_log_detail items for this change log</li> </ul>"},{"location":"tasks/change_log/#changelogdetail-fields","title":"ChangeLogDetail - Fields","text":"<ul> <li>type (text):  Acceptable values include: New Feature, Enhancement, Removed Feature, Bug Fix, Security</li> <li>title (text):  Text displayed in change log</li> <li>internal (boolean): if internal only display for superusers</li> <li>description (text): Detailed description of this entry.  This is NOT displayed in the change log and is only used for reference here"},{"location":"tasks/change_log/#to-update-the-change-log","title":"To update the Change Log","text":""},{"location":"tasks/change_log/#update-change-log-as-your-working","title":"Update Change Log as your working","text":"<ul> <li>Keep a change log for the current/working change log.</li> <li>Add entries for new features, enhancements, etc.</li> </ul>"},{"location":"tasks/change_log/#update-change-log-when-ready-to-push-to-production","title":"Update Change Log when ready to push to Production","text":"<ul> <li>As part of the final steps of preparing code for production (ie Testing &amp; Linting)</li> <li>Update Change Log for to be included in push to production</li> </ul>"},{"location":"tasks/change_log/#citations","title":"Citations","text":"<p>semver.org | keepachangelog.com</p>"},{"location":"tasks/deploy/","title":"Deploy / Publish to Production","text":""},{"location":"tasks/deploy/#deploy-to-digital-ocean-droplet-with-ubuntu-2204-running-nginx-gunicorn-and-postgresql","title":"Deploy to Digital Ocean Droplet with Ubuntu 22.04 running nginx, gunicorn, and postgreSQL","text":"<ul> <li>Complete full Testing on local machine (fix any issues discovered in testing before next step) <pre><code>make test\n</code></pre></li> <li>Complete full Linting on local machine (fix any linting issues before moving on) <pre><code>make pre-commit\n</code></pre></li> <li>Update  main branch with latest changes.     Either:<ul> <li>merge new branch into  main branch</li> <li>push changes to  main branch</li> </ul> </li> <li>When ready, initiate a pull request to merge changes from the main branch into the production branch.  <ul> <li>In Github open production branch on click on:  n commints behind of main.  </li> <li>You should see something like this: base: production compare: main  Able to merge.  ... click the Create Pull Request button and review the changes.</li> <li>Approve and Complete Pull Request according to procedures. Pull Request title should be the version number. <pre><code>version: 0.1.18-alpha\n</code></pre> The description should show bulleted points that outline the major changes in this version.  It should be similar to the change log, but provide a little more detail.  It may also contain additional items that may not have been appropriate to include in the change log <pre><code>- Correct behavior of 'Cancel' button on the 'My Profile' page\n- Add django-check-seo tools to dev environment.\n- Enhanced 'Home' page to provide a better user experience by making it more engaging and informative. Added 'features' and 'How To' sections\n</code></pre></li> </ul> </li> <li>Open up a terminal on the Digital Ocean Droplet alias<pre><code>remote\n</code></pre></li> <li>cd into the correct directory.  You should be in:  ~/beats -or- /home/rocket/beats <pre><code>pwd\n</code></pre> output<pre><code>/home/rocket/beats\n</code></pre></li> <li>Check status <pre><code>git status\n</code></pre> output<pre><code>On branch production\nYour branch is up to date with 'origin/production'.\n\nnothing to commit, working tree clean\n</code></pre></li> <li>Updated code on remote server with latest from production branch <pre><code>git pull origin production\n</code></pre></li> <li>If it's a simple update you can just reload gunicorn &amp; nginx alias<pre><code>restart\n</code></pre>   -- or -- full commands<pre><code>sudo systemctl restart gunicorn\nsudo systemctl restart nginx\n</code></pre></li> <li> <p>If it is a more complex update (including changes to the database or dependencies) activate virtual environment<pre><code>source _env/bin/activate\n</code></pre> install dependencies<pre><code>pip install -r requirements.txt\n</code></pre> apply django migrations<pre><code>python manage.py migrate\n</code></pre> collect static files<pre><code>python manage.py collectstatic\n</code></pre> restart gunicorn &amp; nginx using alias<pre><code>restart\n</code></pre> -- or -- restart gunicorn &amp; nginx full commands<pre><code>sudo systemctl restart gunicorn\nsudo systemctl restart nginx\n</code></pre></p> </li> <li> <p>You may need to access the admin site to update settings for django-waffle flags, switches or samples.  Access the admin site at:  /delta/ <pre><code>http://cyclingbeats.com/delta/\n</code></pre></p> </li> </ul>"},{"location":"tasks/django_shell/","title":"Using Django Shell to Build DB Queries","text":"<p>Steps for working with the Django Shell, a command-line interface provided by Django to interact with your Django project.  This can be useful for interactively testing and exploring your Django models and queries within the Django Shell. </p> <ul> <li>Open Django Shell <pre><code>poetry run python manage.py shell\n</code></pre></li> <li>import your model <pre><code>from project.apps.activity.models import Modelname\n</code></pre></li> <li>make and instance of the model that you want to test <pre><code>instance = Activity.objects.get(id=222)\n</code></pre></li> <li> <p>view items in that instance  <pre><code>for field, value in instance.__dict__.items():\n    print(f\"{field}: {value}\")\n</code></pre> * be sure to indent lines 2+ and double return to execute loop</p> </li> <li> <p>build &amp; test your query for inclusion in kudos.yaml config <pre><code>if instance.core_data[\"distance\"] &gt;= 100:\n    achieved = True\nelse:\n    achieved = False\nprint(achieved)\n</code></pre>  * indent as you normaly would. * One return to execute one line command or next line of multi-line command * Two returns to execute multi-line command </p> </li> </ul>"},{"location":"tools/dependency_management/","title":"Dependency Management (Poetry)","text":""},{"location":"tools/dependency_management/#overview","title":"Overview","text":"<p>This section provides guidance on using Poetry for dependency management within this project. Poetry simplifies the process of managing Python packages and helps maintain a consistent and reproducible development environment.</p> <ul> <li>Poetry  Poetry is a Python dependency management and packaging tool. It simplifies the process of managing project dependencies, creating virtual environments, and packaging Python projects for distribution. Poetry uses a pyproject.toml file to define dependencies and project settings, making it a modern and user-friendly tool for Python developers. Poetry.org |  GitHub</li> </ul>"},{"location":"tools/dependency_management/#setup","title":"Setup","text":"<ul> <li>Prerequisites (Ensure that Poetry is installed on your machine. You can install it using the following command:) <pre><code>pip install poetry\n</code></pre></li> <li> <p>Installation (To install project dependencies using Poetry, run:) <pre><code>git clone [repository_url]\ncd beats\npoetry install --no-root\n</code></pre> * the --no-root option installs the project's dependencies defined in pyproject.toml without including the root project itself.</p> </li> <li> <p>Virtual Environment (Activate the Poetry virtual environment to work within an isolated environment:) <pre><code>poetry shell\n</code></pre> -- or manually -- <pre><code>source .venv\\bin\\activate\n</code></pre></p> </li> </ul>"},{"location":"tools/dependency_management/#add-dependencies","title":"Add Dependencies","text":"<p>To add dependencies to this project execute the following command <pre><code>poetry add [dependency_name]\n</code></pre> This adds the dependency to the pyproject.toml file <pre><code>[tool.poetry.dependencies]\ndependency_name = \"^2.1\"\n</code></pre></p>"},{"location":"tools/dependency_management/#running-commands-in-poetry-shell","title":"Running commands in poetry shell","text":"<p>Most common command can be executing using make statements. see Makefile If there are commands that are not included in the make file you can execute them using the following convention. <pre><code>poetry run python your_script.py\npoetry run python manage.py shell\npoetry run command_name [--options]\npoetry run isort file_name.py\n</code></pre></p>"},{"location":"tools/dot_fit_files/","title":"Tools for working with .fit Files","text":""},{"location":"tools/dot_fit_files/#tools-i-use","title":"Tools I use","text":"<ul> <li>www.fitfileviewer.com</li> </ul>"},{"location":"tools/dot_fit_files/#others-tools-to-try","title":"Others tools to try","text":"<ul> <li>https://www.fitfiletools.com/#/top</li> <li>https://runalyze.com/tool/fit-viewer?_locale=en</li> <li>https://jumpshare.com/viewer/fit</li> <li>https://fit-file-analyzer.vercel.app/</li> <li>https://www.dcrainmaker.com/tools</li> </ul> <p>TODO: complete this document</p>"},{"location":"tools/linting/","title":"Linting (pre-commit)","text":""},{"location":"tools/linting/#todo-complete-linting-documentation","title":"TODO: Complete Linting Documentation","text":"<ul> <li>pre-commit  Pre-commit is a Python tool that helps developers ensure code quality and consistency by automatically running a set of pre-defined code checks and formatting tasks before each commit to a version control system (such as Git). It allows you to define a list of hooks or checks in a configuration file, and these checks can include linting, code formatting, spell-checking, and more. Pre-commit helps catch issues early in the development process, ensuring that only well-formatted and clean code gets committed to a project's repository, thereby maintaining code quality and consistency across the team. pre-commit.com</li> </ul>"},{"location":"tools/logging/","title":"Logging","text":""},{"location":"tools/logging/#basic-setup","title":"Basic Setup","text":"import &amp; create logger object<pre><code>import logging\n\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save, pre_delete\n...\n...\nfrom .models import Activity\n\nlogger = logging.getLogger(__name__)\n...\n</code></pre>"},{"location":"tools/logging/#logger-levels-messages","title":"Logger Levels &amp; Messages","text":"<pre><code>logger.debug(\"Harmless debug Message\")\nlogger.info(\"Just an information\")\nlogger.warning(\"Its a Warning\")\nlogger.error(\"Did you try to divide by zero\")\nlogger.critical(\"Internet is down\")\n</code></pre>"},{"location":"tools/logging/#example","title":"Example","text":"forms.py<pre><code>if user:  # if user is available\n    # setup profile\n    ...\nelse:\n    # Set default values if user is not provided and log a warning\n    ...\n    logger.warning(\"User is not provided for RideForm. Default values are set.\")\n</code></pre>"},{"location":"tools/makefile/","title":"Make File","text":""},{"location":"tools/makefile/#purpose","title":"Purpose","text":"<p>This Makefile provides convenient commands for managing your Django project using Poetry. It covers installation, Django commands, testing, and pre-commit, linting, and formatting tasks.</p>"},{"location":"tools/makefile/#poetry-commands","title":"Poetry Commands","text":"<ul> <li>Install Dependencies (Installs project dependencies using Poetry.) <pre><code>make install\n</code></pre></li> <li>Activate Virtual Environment (Activates the Poetry virtual environment.) <pre><code>make shell\n</code></pre></li> </ul>"},{"location":"tools/makefile/#django-commands","title":"Django Commands","text":"<ul> <li>Run Django Development Server (Runs the Django development server on 127.0.0.1:8000.) - Optionally set the verbosity level <pre><code>make run\nmake run v=2  \n</code></pre></li> <li>Create Superuser (Creates a superuser for the Django project.) <pre><code>make superuser\n</code></pre></li> <li>Create Migrations (Creates database migrations.) <pre><code>make migrations\n</code></pre></li> <li>Apply Migrations (Applies database migrations.) <pre><code>make migrate\n</code></pre></li> <li>Collect Static Files (Collects static files for the project.) <pre><code>make collectstatic\n</code></pre></li> <li>Django Shell (Open in python shell with project environment in plass) <pre><code>make dj-shell\n</code></pre></li> <li>Run Manage.py - optionnaly apply argument for management command and additonal args <pre><code>make manage\nmake manage cmd=migrate\nmake manage cmd=createsuperuser args=\"--username admin --email admin@example.com\"\n</code></pre></li> </ul>"},{"location":"tools/makefile/#testing-commands","title":"Testing Commands","text":"<ul> <li>Run All Tests (Runs all tests for the Django project.) <pre><code>make test\n</code></pre></li> <li>Run Specific Tests (Runs tests for specific Django apps.) <pre><code>make test-account\nmake test-activities\nmake test-common\nmake test-core\nmake test-first\nmake test-dashboard\nmake test-feed\nmake test-kudos\nmake test-pages\nmake test-profile\nmake test-rides\nmake test-showcase\n</code></pre></li> <li>Run Tests and set Verbosity Level <pre><code>make test v=1\nmake test-account v=2\nmake test-activities v=3\n...\n</code></pre></li> <li>Run Tests with Coverage (Runs tests with coverage and generates a coverage report.) <pre><code>make test-coverage\n</code></pre></li> </ul>"},{"location":"tools/makefile/#pre-commit-linting-and-formatting-commands","title":"Pre-commit, Linting, and Formatting Commands","text":"<ul> <li>Install Pre-commit Hooks (Installs pre-commit hooks for linting and formatting.) <pre><code>make install-pre-commit\n</code></pre></li> <li>Update Project (Updates the project by installing dependencies, applying migrations, and installing pre-commit hooks.) <pre><code>make update\n</code></pre></li> <li>Lint Code (Runs linting checks on all project files.) <pre><code>make lint\n</code></pre></li> <li>Format Code with Black (Formats code using Black.) <pre><code>make black\n</code></pre></li> <li>Sort Imports with isort (Sorts imports using isort.) <pre><code>make isort\n</code></pre></li> <li>Run Ruff Linter (Runs Ruff linter.) <pre><code>make ruff\n</code></pre></li> <li>Fix Ruff Linter Issues (Fixes issues reported by the Ruff linter.) <pre><code>make ruff-fix\n</code></pre></li> </ul>"},{"location":"tools/makefile/#custom-commands","title":"Custom Commands","text":"<ul> <li> <p>Run send_test_email custom command - With provided email type <pre><code>make test_email type=email_confirmation\nmake test_email type=password_reset\n</code></pre> Supported email types: <ul> <li>account_already_exists (shorthand: exists)</li> <li>email_confirmation (shorthand: confirm)</li> <li>email_confirmation_signup (shorthand: signup)</li> <li>email_verification (shorthand: verify)</li> <li>password_reset (shorthand: reset)</li> <li>unknown_account (shorthand: unknown) </li> </ul> <li> <p>Run check-filenames custom command <pre><code>make check-filenames\n</code></pre></p> </li>"},{"location":"tools/project_structure/","title":"Project Structure","text":""},{"location":"tools/project_structure/#todo-complete-project-structure-documentation","title":"TODO: Complete Project Structure Documentation","text":""},{"location":"tools/terminal/","title":"Tools for Terminal","text":""},{"location":"tools/terminal/#starship","title":"Starship","text":"<p>Starship is a minimal, highly customizable, and fast command prompt (shell prompt) written in Rust. It is designed to provide a sleek and informative command-line interface (CLI) for your terminal, enhancing your overall command-line experience  starship.rs  starship.rs |  Pastel Powerline (a starship theme) | $git_status icons</p>"},{"location":"tools/terminal/#micro","title":"Micro","text":"<p>Micro is a terminal-based text editor designed for ease of use, speed, and extensibility. It is an open-source project written in the Go programming language. Micro aims to provide a modern and user-friendly text editing experience within a terminal environment. - https://micro-editor.github.io/</p>"},{"location":"tools/testing_coverage/","title":"Testing &amp; Coverage","text":""},{"location":"tools/testing_coverage/#common-setup-mixins","title":"Common Setup Mixins","text":"<p>In the project's test setup, a series of mixins have been developed under the module project.tests.setup. These mixins serve the purpose of standardizing the creation of various objects such as users, activities, levels, containers, and others, which are commonly used in test cases. By utilizing these mixins, the process of setting up test data becomes consistent and streamlined across different test cases.</p> <p>These mixins are designed to be inherited by individual TestCase classes based on their specific testing requirements. Test classes can inherit a combination of these mixins depending on the data setup needed for each test scenario. This modular approach allows for greater flexibility and reusability of test setup code, promoting cleaner and more maintainable test suites.</p>"},{"location":"tools/testing_coverage/#usage","title":"Usage","text":"<ul> <li>Import required Mixins</li> </ul> <pre><code>from project.tests.setup import BasicUserSetupMixin, LevelSetupMixin\n</code></pre> <ul> <li>Define TestCase class and inherit required Mixins</li> </ul> <pre><code>class SampleTestCase(TestCase, BasicUserSetupMixin, LevelSetupMixin)\n</code></pre> <ul> <li>Initiate Mixins in either a setUpTestData or setUp Methods.</li> </ul> <p>setUpTestData(): This method is called once per test case class and is used to set up test data that will be shared across all test methods within the class. It's commonly used to create database records or initialize other resources that will be used by multiple test methods. </p> setUpTestData()<pre><code>@classmethod\ndef setUpTestData(cls):\n    \"\"\"Call LevelSetupMixin setUpTestData.\"\"\"\n    BasicUserSetupMixin.setUpTestData()    \n    LevelSetupMixin.setUpTestData()\n</code></pre> <p>setUp(): This method is called before each individual test method within the test case class. It's used to set up any test-specific data or resources that are needed for the particular test method being executed. This allows you to customize the test environment for each test method independently.</p> <p>TODO:Does this actually work?  Need to test using the setUp() method this way</p> setUp()<pre><code>def setUp(self):\n    \"\"\"Call LevelSetupMixin setUpTestData.\"\"\"\n    super().setUp()\n    BasicSetupMixin.setUpTestData()??\n    LevelSetupMixin.setUpTestData()??\n\n    # add additonal setup as necessary\n</code></pre> <ul> <li>Access objects in individual tests with self <pre><code>self.user\nself.profile\n...\n</code></pre></li> </ul>"},{"location":"tools/testing_coverage/#mixin-names-objects-provided","title":"Mixin Names &amp; Objects Provided","text":""},{"location":"tools/testing_coverage/#-basicusersetupmixin","title":"- BasicUserSetupMixin","text":"<ul> <li>user</li> <li>profile</li> </ul>"},{"location":"tools/testing_coverage/#-superusersetupmixin","title":"- SuperUserSetupMixin","text":"<ul> <li>superuser</li> <li>superprofile</li> </ul>"},{"location":"tools/testing_coverage/#-levelsetupmixin","title":"- LevelSetupMixin","text":"<ul> <li>level(level=1 min_range=0 max_range=99)</li> <li>level(level=2 min_range=100 max_range=199)</li> <li>level(level=3 min_range=200 max_range=299)</li> </ul>"},{"location":"tools/testing_coverage/#-beatssetupmixin-inherits-basicusersetupmixin","title":"- BeatsSetupMixin (inherits BasicUserSetupMixin)","text":"<ul> <li>log1 (transaction_type=\"add\", transaction_amount=100)</li> <li>log2 (transaction_type=\"subtract\", transaction_amount=30)</li> <li>log3 (transaction_type=\"add\", transaction_amount=50)</li> <li>user (from BasicUserSetupMixin)</li> <li>profile (from BasicUserSetupMixin)</li> </ul>"},{"location":"tools/testing_coverage/#-roomcontainersetupmixin-inherits-basicusersetupmixin","title":"- RoomContainerSetupMixin (inherits BasicUserSetupMixin)","text":"<ul> <li>config_room (The room configuration object created for testing.)</li> <li>config_container (The container configuration object created for testing.)</li> <li>room</li> <li>container</li> <li>user (from BasicUserSetupMixin)</li> <li>profile (from BasicUserSetupMixin)</li> </ul>"},{"location":"tools/testing_coverage/#common-setup-class","title":"Common Setup Class","text":"<p>A CommonSetup class has been created in projects/tests/setup.py. It allows you to utilize the pre-defined setup, including users, profiles, and activities, directly in your tests.</p> <p>To use the CommonSetup class in other tests, inherit test classes from CommonSetup instead of TestCase. </p> <p>If additional setup is needed that is not included in CommonSetup() you can call super().setUp() to add to the setUp method.</p> <ul> <li> <p>Import CommonSetup <pre><code>from project.tests.setup import CommonSetup\n</code></pre></p> </li> <li> <p>Inherit from CommonSetup <pre><code>class MyNewTest(CommonSetup):\n    def test1(self):\n        ...\n</code></pre></p> </li> <li> <p>The Class creates the following objects <pre><code>- userM, userI: Test users with metric and imperial preferences, respectively.\n- profileM, profileI: Corresponding profiles detailing unit preferences and\n  additional information.\n- activityM1, activityM2, activityI1, activityI2: Activity records associated\n  with the respective users.\n- kudoM2, kudoI2a, kudoI2b: Kudo records linked to the activities (1 trophy\n  for userM with activityM2, 2 trophies for userI with activityI2)\n- date_range: A dictionary defining the start and end dates for a common \n  testing period.\n- userM_distance, userM_elevation, userI_distance_km, userI_distance_mi,\n  userI_elevation_m, userI_elevation_ft: Expected results for tests involving\n  distance and elevation calculations in both unit systems.\n</code></pre></p> </li> </ul> CommonSetup()<pre><code>class CommonSetup(TestCase):\n    def setUp(self):\n        \"\"\"Set up the test users, profiles, and activities.\"\"\"\n        # setup for metric user\n        self.userM = User.objects.create_user(username=\"testuserM\", password=\"12345\")\n        self.profileM = Profile.objects.create(\n            user=self.userM,\n            bio=\"Metric user\",\n            units_display_preference=\"metric\",\n        )\n        self.activityM1 = Activity.objects.create(\n            user=self.userM,\n            activity_type=\"ride\",\n            activity_timestamp=pendulum.datetime(2024, 1, 1, 16, 10, tz=\"UTC\"),\n            core_data={\n                \"distance\": 10,\n                \"duration\": 600,\n                \"elevation\": 10,\n                \"calories\": 200,\n            },\n        )\n        self.activityM2 = Activity.objects.create(\n            user=self.userM,\n            activity_type=\"ride\",\n            activity_timestamp=pendulum.datetime(2024, 1, 2, 16, 10, tz=\"UTC\"),\n            core_data={\n                \"distance\": 100,\n                \"duration\": 600,\n                \"elevation\": 100,\n                \"calories\": 200,\n            },\n        )\n        self.kudoM2 = Kudo.objects.create(\n            kudo_type=\"trophy\",\n            user=self.userM,\n            kudo_name=\"Trophy 1\",\n            active=True\n        )\n        self.kudoM2.activities.add(self.activityM2)\n\n        # setup for imperial user\n        self.userI = User.objects.create_user(username=\"testuserI\", password=\"12345\")\n        self.profileI = Profile.objects.create(\n            user=self.userI,\n            bio=\"Imperial user\",\n            units_display_preference=\"imperial\",\n        )\n        self.activityI1 = Activity.objects.create(\n            user=self.userI,\n            activity_type=\"ride\",\n            activity_timestamp=pendulum.datetime(2024, 1, 1, 16, 10, tz=\"UTC\"),\n            core_data={\n                \"distance\": 16.09,  # 10 miles\n                \"duration\": 600,\n                \"elevation\": 3.048,  # 10 feet\n                \"calories\": 200,\n            },\n        )\n        self.activityI2 = Activity.objects.create(\n            user=self.userI,\n            activity_type=\"ride\",\n            activity_timestamp=pendulum.datetime(2024, 1, 2, 16, 10, tz=\"UTC\"),\n            core_data={\n                \"distance\": 160.934,  # 100 miles\n                \"duration\": 600,\n                \"elevation\": 30.48,  # 100 feet\n                \"calories\": 200,\n            },\n        )\n        self.kudoI2a = Kudo.objects.create(\n            kudo_type=\"trophy\",\n            user=self.userI,\n            kudo_name=\"Trophy 1\",\n            active=True\n        )\n        self.kudoI2a.activities.add(self.activityI2)\n        self.kudoI2b = Kudo.objects.create(\n            kudo_type=\"trophy\",\n            user=self.userI,\n            kudo_name=\"Trophy 2\",\n            active=True\n        )\n        self.kudoI2b.activities.add(self.activityI2)\n\n        # setup for date range this is common between the two users\n        self.date_range = {\n            \"start\": pendulum.datetime(2024, 1, 1, 0, 0, tz=\"UTC\"),\n            \"end\": pendulum.datetime(2024, 1, 7, 23, 59, 59, tz=\"UTC\"),\n        }\n        # setup for expected results for the metric user\n        self.userM_distance = 110\n        self.userM_elevation = 110\n        # setup for expected results for the imperial user\n        self.userI_distance_km = 177.024\n        self.userI_distance_mi = 110\n        self.userI_elevation_m = 33.5488\n        self.userI_elevation_ft = 110\n\n    def tearDown(self):\n        \"\"\"Clean up the objects created during setUp.\"\"\"\n        self.userM.delete()\n        self.userI.delete()\n        # add more if I find that this is necessary\n</code></pre>"},{"location":"v2/project_structure/","title":"Project Overview","text":""},{"location":"v2/project_structure/#project-structure","title":"Project Structure","text":"<p>The project is organized into several directories and files, each serving a  specific purpose. Here's a breakdown of the main components:</p>"},{"location":"v2/project_structure/#directory-structure-key-files","title":"Directory Structure &amp; Key Files","text":"<ul> <li>Root<ul> <li>makefiles/</li> <li>project/<ul> <li>apps/<ul> <li>activity/</li> <li>common/</li> <li>community/</li> <li>dashboard/</li> <li>feed/</li> <li>kudos/</li> <li>pages/</li> <li>profiles/</li> <li>rides/</li> <li>showcase/</li> </ul> </li> <li>config/</li> <li>core/<ul> <li>settings/</li> <li>static/</li> </ul> </li> <li>logs/</li> <li>media/</li> <li>static/</li> <li>templates/<ul> <li>account/</li> <li>community/</li> <li>dashboard/</li> <li>feed/</li> <li>includes/</li> <li>kudos/</li> <li>pages/</li> <li>rides/</li> <li>shared/</li> <li>showcase/</li> </ul> </li> <li>tests/<ul> <li>_first/</li> <li>apps/<ul> <li>account/</li> <li>activity/</li> <li>common/</li> <li>community/</li> <li>dashboard/</li> <li>feed/</li> <li>kudos/</li> <li>pages/</li> <li>profile/</li> <li>rides/</li> <li>showcase/</li> </ul> </li> <li>setup.py</li> </ul> </li> </ul> </li> <li>.coveragerc</li> <li>.editorconfig</li> <li>.gitignore</li> <li>.pre-commit-config.yaml</li> <li>.pre-commit-quick-config.yaml</li> <li>makefile</li> <li>poetry.lock</li> <li>pyproject.toml</li> <li>requirements.txt</li> </ul> </li> </ul>"},{"location":"v2/project_structure/#apps","title":"Apps","text":""},{"location":"v2/project_structure/#activity","title":"Activity","text":"<p>The activity app is responsible for managing and storing user activities. While the primary activity type handled is rides, the app is designed to be flexible and can be expanded to support additional activity types in the future.</p> <p>Key components include:</p> <ul> <li>Activity Model: The core model that tracks general information about all user activities.</li> <li>RideDetail Model: A specialized model that stores extra details specifically for activities of the ride type, allowing for more detailed tracking of cycling events.</li> <li>Admin Configuration: This app includes admin configuration classes for both the Activity and RideDetail models, enabling efficient management of activities through the Django admin interface. The app is focused on data modeling and admin management, without including any URLs or views.</li> </ul>"},{"location":"v2/project_structure/#common","title":"Common","text":""},{"location":"v2/project_structure/#community","title":"Community","text":"<p>The community app facilitates social interactions between users, focusing on follow relationships and invitations, while providing a frontend for users to discover and view each other's Showcase pages.</p> <p>Key components include:</p> <ul> <li>Models: The Follow and Invite models handle relationships between users and manage invitations for following.</li> <li>Views and URLs: The app includes views and URL configurations for the Community page, allowing users to search for, follow, and interact with other users, with a key emphasis on displaying other users' Showcase pages.</li> <li>Admin Configuration: Admin configuration classes for the Follow and Invite models allow for managing social interactions via the Django admin interface.</li> </ul> <p>This app serves as the foundation for user interaction, focusing on following users and prominently showcasing their achievements.</p>"},{"location":"v2/project_structure/#dashboard","title":"Dashboard","text":"<p>The dashboard app provides users with a comprehensive view of their activity data over different time ranges, such as weekly, monthly, and yearly, aggregating statistics and visualizations to track progress and achievements.</p> <p>Key components include:</p> <ul> <li>DashboardWeeklyView, DashboardMonthlyView, DashboardYearlyView: These views provide insights into user activity over the respective time periods, displaying aggregated statistics and visualizations.</li> <li>DashboardBaseView: A base view that supports the other dashboard views by structuring shared functionality and data handling.</li> <li>Helper Functions: These functions gather context data such as date ranges, ride statistics, beats, vitals, habits, trophies, kudos, and chart data for visualizing activity.</li> </ul> <p>This app is designed to give users detailed feedback on their progress across various time frames.</p>"},{"location":"v2/project_structure/#feed","title":"Feed","text":"<p>The feed app is designed to manage and display user activities in a feed format, offering both a paginated list of activities and detailed views of individual activities without directly managing any models or data.</p> <p>Key components include:</p> <ul> <li>FeedView: Displays a paginated list of the user's activities, including kudos and beat transaction logs, with HTMX support for infinite scrolling and dynamically loading more activities as the user scrolls.</li> <li>DetailView: Provides a detailed view of individual activities, including ride details, allowing users to explore specific activities in depth.</li> </ul> <p>This app focuses on presenting user activities rather than managing the underlying data.</p>"},{"location":"v2/project_structure/#kudos","title":"Kudos","text":""},{"location":"v2/project_structure/#pages","title":"Pages","text":""},{"location":"v2/project_structure/#profiles","title":"Profiles","text":""},{"location":"v2/project_structure/#rides","title":"Rides","text":""},{"location":"v2/project_structure/#showcase","title":"Showcase","text":""},{"location":"v2/project_structure/#key-directories","title":"Key Directories","text":""},{"location":"v2/project_structure/#makefiles","title":"makefiles/","text":""},{"location":"v2/project_structure/#project","title":"project/","text":""},{"location":"v2/project_structure/#apps_1","title":"apps/","text":""},{"location":"v2/project_structure/#config","title":"config/","text":""},{"location":"v2/project_structure/#core","title":"Core","text":"<p>The core app serves as the foundational layer of the project, managing essential configurations and settings. It includes the following key components:</p> <ul> <li>Root URL Configuration: The root urls.py file, which routes all incoming HTTP requests to the appropriate app or view.</li> <li>WSGI/ASGI Files: Both wsgi.py and asgi.py files are present to enable the project to run under different deployment protocols (WSGI for synchronous and ASGI for asynchronous environments).</li> <li>Settings: The project settings are modularized using django-split-settings. The core app contains a settings/ folder, which is split into multiple settings files for easier management and customization across different environments.</li> <li>Environment Configuration: The core app also stores the .env file, where sensitive project environment variables, such as database credentials and secret keys, are securely managed.</li> <li>Static Files: The app includes a static/ folder that holds static assets like CSS, JavaScript, and image files, which are used throughout the project.</li> </ul> <p>The core app is crucial for the overall configuration and serves as the backbone of the project\u2019s setup and deployment.</p>"},{"location":"v2/project_structure/#logs","title":"logs/","text":""},{"location":"v2/project_structure/#media","title":"media/","text":""},{"location":"v2/project_structure/#static","title":"static/","text":""},{"location":"v2/project_structure/#templates","title":"templates/","text":""},{"location":"v2/project_structure/#includes","title":"includes/","text":""},{"location":"v2/project_structure/#tests","title":"tests/","text":""},{"location":"v2/project_structure/#_first","title":"_first/","text":""},{"location":"v2/project_structure/#apps_2","title":"apps/","text":""},{"location":"v2/project_structure/#key-files","title":"Key Files","text":""},{"location":"v2/project_structure/#testssetuppy","title":"tests/setup.py","text":""},{"location":"v2/project_structure/#coveragerc","title":".coveragerc","text":""},{"location":"v2/project_structure/#editorconfig","title":".editorconfig","text":""},{"location":"v2/project_structure/#gitignore","title":".gitignore","text":""},{"location":"v2/project_structure/#pre-commit-configyaml","title":".pre-commit-config.yaml","text":""},{"location":"v2/project_structure/#pre-commit-quick-configyaml","title":".pre-commit-quick-config.yaml","text":""},{"location":"v2/project_structure/#makefile","title":"makefile","text":""},{"location":"v2/project_structure/#poetrylock","title":"poetry.lock","text":""},{"location":"v2/project_structure/#pyprojecttoml","title":"pyproject.toml","text":""},{"location":"v2/project_structure/#requirementstxt","title":"requirements.txt","text":""},{"location":"v2/v2/","title":"Version 2 Documentation","text":""},{"location":"v2/v2/#introduction","title":"Introduction","text":""},{"location":"v2/v2/#getting-started","title":"Getting Started","text":""},{"location":"v2/v2/#project-structure","title":"Project Structure","text":""},{"location":"v2/v2/#usage","title":"Usage","text":""},{"location":"v2/v2/#configuration","title":"Configuration","text":""},{"location":"v2/v2/#development","title":"Development","text":""},{"location":"v2/v2/#deployment","title":"Deployment","text":""},{"location":"v2/v2/#tools-and-resources","title":"Tools and Resources","text":""},{"location":"v2/v2/#api-documentation","title":"API Documentation","text":""},{"location":"v2/v2/#contributing","title":"Contributing","text":""},{"location":"v2/v2/#miscellaneous","title":"Miscellaneous","text":""},{"location":"v2/v2/#appendices","title":"Appendices","text":""}]}